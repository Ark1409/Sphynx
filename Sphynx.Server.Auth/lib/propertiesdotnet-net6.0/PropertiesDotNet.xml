<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PropertiesDotNet</name>
    </assembly>
    <members>
        <member name="T:PropertiesDotNet.Core.TokenRead">
            <summary>
            Delegate that is called when a token is read from a document.
            </summary>
            <param name="reader">The reader where the token was read.</param>
            <param name="token">The token that was read.</param>
        </member>
        <member name="T:PropertiesDotNet.Core.IPropertiesReader">
            <summary>
            Represents a ".properties" document reader. An <see cref="T:PropertiesDotNet.Core.IPropertiesReader"/> reads a ".properties"
            document in tokens and provides access to them in a stream-like format.
            </summary>
        </member>
        <member name="E:PropertiesDotNet.Core.IPropertiesReader.TokenRead">
            <summary>
            Event raised when a token is read from a document.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Core.IPropertiesReader.Settings">
            <summary>
            The settings for this reader.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Core.IPropertiesReader.Token">
            <summary>
            Returns the current token.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Core.IPropertiesReader.TokenStart">
            <summary>
            Represents a marker on the starting position of the current token.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Core.IPropertiesReader.TokenEnd">
            <summary>
            Represents a marker on the ending position of the current token.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Core.IPropertiesReader.HasLineInfo">
            <summary>
            Whether this reader preserves line information.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Core.IPropertiesReader.MoveNext">
            <summary>
            Moves to the next token.
            </summary>
            <returns>Whether there are any tokens left to read.</returns>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If an error was encountered whilst trying to
            read the document, and exceptions are configured to be thrown.</exception>
        </member>
        <member name="T:PropertiesDotNet.Core.PropertiesReaderExtensions">
            <summary>
            Provides extension methods for an <see cref="T:PropertiesDotNet.Core.IPropertiesReader"/>.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesReaderExtensions.Read(PropertiesDotNet.Core.IPropertiesReader)">
            <summary>
            Reads the current token, or the next token if the reader is at the start state.
            </summary>
            <param name="reader">The underlying reader.</param>
            <returns>The token that was read</returns>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If an error was encountered whilst trying to
            read the document, and exceptions are configured to be thrown.</exception>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesReaderExtensions.MoveToContent(PropertiesDotNet.Core.IPropertiesReader)">
            <summary>
            Moves to the next property within the document.
            </summary>
            <param name="reader">The underlying reader.</param>
            <returns>Whether or not the next property was moved to.</returns>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesReaderExtensions.TryReadProperty(PropertiesDotNet.Core.IPropertiesReader,System.String@,System.String@)">
            <summary>
            Reads the current property, or the next property if the reader is not at a property.
            </summary>
            <param name="reader">The underlying reader.</param>
            <param name="key">The property key.</param>
            <param name="value">The property value.</param>
            <returns>Whether the property could be read.</returns>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If an error was encountered whilst trying to
            read the document, and exceptions are configured to be thrown.</exception>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesReaderExtensions.TryReadProperty(PropertiesDotNet.Core.IPropertiesReader,System.String@,System.Nullable{System.Char}@,System.String@)">
            <summary>
            Reads the current property, or the next property if the reader is not at a property.
            </summary>
            <param name="reader">The underlying reader.</param>
            <param name="key">The property key.</param>
            <param name="assigner">The property assigner.</param>
            <param name="value">The property value.</param>
            <returns>Whether the property could be read.</returns>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If an error was encountered whilst trying to
            read the document, and exceptions are configured to be thrown.</exception>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesReaderExtensions.ReadByte(PropertiesDotNet.Core.IPropertiesReader)">
            <summary>
            Reads the text value for the current token as a <see langword="byte"/>.
            </summary>
            <param name="reader">The underlying reader.</param>
            <returns>The token value as a <see langword="byte"/>.</returns>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If an error was encountered whilst trying to
            read the document, and exceptions are configured to be thrown.</exception>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesReaderExtensions.ReadSByte(PropertiesDotNet.Core.IPropertiesReader)">
            <summary>
            Reads the text value for the current token as a <see langword="sbyte"/>.
            </summary>
            <param name="reader">The underlying reader.</param>
            <returns>The token value as a <see langword="sbyte"/>.</returns>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If an error was encountered whilst trying to
            read the document, and exceptions are configured to be thrown.</exception>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesReaderExtensions.ReadUInt16(PropertiesDotNet.Core.IPropertiesReader)">
            <summary>
            Reads the text value for the current token as a <see langword="ushort"/>.
            </summary>
            <param name="reader">The underlying reader.</param>
            <returns>The token value as a <see langword="ushort"/>.</returns>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If an error was encountered whilst trying to
            read the document, and exceptions are configured to be thrown.</exception>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesReaderExtensions.ReadInt16(PropertiesDotNet.Core.IPropertiesReader)">
            <summary>
            Reads the text value for the current token as a <see langword="short"/>.
            </summary>
            <param name="reader">The underlying reader.</param>
            <returns>The token value as a <see langword="short"/>.</returns>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If an error was encountered whilst trying to
            read the document, and exceptions are configured to be thrown.</exception>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesReaderExtensions.ReadUInt32(PropertiesDotNet.Core.IPropertiesReader)">
            <summary>
            Reads the text value for the current token as a <see langword="uint"/>.
            </summary>
            <param name="reader">The underlying reader.</param>
            <returns>The token value as a <see langword="uint"/>.</returns>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If an error was encountered whilst trying to
            read the document, and exceptions are configured to be thrown.</exception>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesReaderExtensions.ReadInt32(PropertiesDotNet.Core.IPropertiesReader)">
            <summary>
            Reads the text value for the current token as a <see langword="int"/>.
            </summary>
            <param name="reader">The underlying reader.</param>
            <returns>The token value as a <see langword="int"/>.</returns>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If an error was encountered whilst trying to
            read the document, and exceptions are configured to be thrown.</exception>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesReaderExtensions.ReadUInt64(PropertiesDotNet.Core.IPropertiesReader)">
            <summary>
            Reads the text value for the current token as a <see langword="ulong"/>.
            </summary>
            <param name="reader">The underlying reader.</param>
            <returns>The token value as a <see langword="ulong"/>.</returns>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If an error was encountered whilst trying to
            read the document, and exceptions are configured to be thrown.</exception>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesReaderExtensions.ReadInt64(PropertiesDotNet.Core.IPropertiesReader)">
            <summary>
            Reads the text value for the current token as a <see langword="long"/>.
            </summary>
            <param name="reader">The underlying reader.</param>
            <returns>The token value as a <see langword="long"/>.</returns>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If an error was encountered whilst trying to
            read the document, and exceptions are configured to be thrown.</exception>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesReaderExtensions.ReadFloat(PropertiesDotNet.Core.IPropertiesReader)">
            <summary>
            Reads the text value for the current token as a <see langword="float"/>.
            </summary>
            <param name="reader">The underlying reader.</param>
            <returns>The token value as a <see langword="float"/>.</returns>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If an error was encountered whilst trying to
            read the document, and exceptions are configured to be thrown.</exception>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesReaderExtensions.ReadDouble(PropertiesDotNet.Core.IPropertiesReader)">
            <summary>
            Reads the text value for the current token as a <see langword="double"/>.
            </summary>
            <param name="reader">The underlying reader.</param>
            <returns>The token value as a <see langword="double"/>.</returns>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If an error was encountered whilst trying to
            read the document, and exceptions are configured to be thrown.</exception>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesReaderExtensions.ReadDecimal(PropertiesDotNet.Core.IPropertiesReader)">
            <summary>
            Reads the text value for the current token as a <see langword="decimal"/>.
            </summary>
            <param name="reader">The underlying reader.</param>
            <returns>The token value as a <see langword="decimal"/>.</returns>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If an error was encountered whilst trying to
            read the document, and exceptions are configured to be thrown.</exception>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesReaderExtensions.ReadBool(PropertiesDotNet.Core.IPropertiesReader)">
            <summary>
            Reads the text value for the current token as a <see langword="bool"/>.
            </summary>
            <param name="reader">The underlying reader.</param>
            <returns>The token value as a <see langword="bool"/>.</returns>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If an error was encountered whilst trying to
            read the document, and exceptions are configured to be thrown.</exception>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesReaderExtensions.ReadChar(PropertiesDotNet.Core.IPropertiesReader)">
            <summary>
            Reads the text value for the current token as a <see langword="char"/>.
            </summary>
            <param name="reader">The underlying reader.</param>
            <returns>The token value as a <see langword="char"/>.</returns>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If an error was encountered whilst trying to
            read the document, and exceptions are configured to be thrown.</exception>
        </member>
        <member name="T:PropertiesDotNet.Core.TokenWritten">
            <summary>
            Delegate called when a token is written.
            </summary>
            <param name="writer">The writer where the token was written.</param>
            <param name="token">The token that was written.</param>
        </member>
        <member name="T:PropertiesDotNet.Core.IPropertiesWriter">
            <summary>
            Represents a ".properties" document writer used to write document information, in the form of
            tokens. This interface allows for multiple custom implementations of ".properties" writers.
            </summary> 
        </member>
        <member name="E:PropertiesDotNet.Core.IPropertiesWriter.TokenWritten">
            <summary>
            Event raised when a token is written into an <see cref="T:PropertiesDotNet.Core.IPropertiesWriter"/>.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Core.IPropertiesWriter.Settings">
            <summary>
            The settings for this writer.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Core.IPropertiesWriter.Write(PropertiesDotNet.Core.PropertiesToken)">
            <summary>
            Writes or emits the token to this writer.
            </summary>
            <param name="token">The token to write.</param>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If an incorrect token was passed as an argument, 
            depending on the context.</exception>
            <returns>true if the token was successfully written; false otherwise.</returns>
        </member>
        <member name="M:PropertiesDotNet.Core.IPropertiesWriter.Flush">
            <summary>
            Dumps all the cached tokens to the underlying stream.
            </summary>
        </member>
        <member name="T:PropertiesDotNet.Core.PropertiesWriterExtensions">
            <summary>
            Provides extensions methods for an <see cref="T:PropertiesDotNet.Core.IPropertiesWriter"/>.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesWriterExtensions.WriteProperty(PropertiesDotNet.Core.IPropertiesWriter,System.String,System.String)">
            <summary>
            Writes a new property to the document.
            </summary>
            <param name="writer">The underlying writer</param>
            <param name="key">The key for the property</param>
            <param name="value">The value of the property.</param>
            <returns>true if the property could be written; false otherwise.</returns>
        </member>
        <member name="T:PropertiesDotNet.Core.PropertiesException">
            <summary>
            Represents an exception thrown by the PropertiesDotNet library.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesException.#ctor">
            <summary>
            Creates a new <see cref="T:PropertiesDotNet.Core.PropertiesException"/>.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesException.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:PropertiesDotNet.Core.PropertiesException"/>.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new <see cref="T:PropertiesDotNet.Core.PropertiesException"/>.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:PropertiesDotNet.Core.PropertiesReader">
            <summary>
            A ".properties" document reader that implements a non-cached, forward-only token generation scheme.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Core.PropertiesReader.Settings">
            <inheritdoc/>
        </member>
        <member name="E:PropertiesDotNet.Core.PropertiesReader.TokenRead">
            <inheritdoc/>
        </member>
        <member name="P:PropertiesDotNet.Core.PropertiesReader.Token">
            <inheritdoc/>
        </member>
        <member name="P:PropertiesDotNet.Core.PropertiesReader.TokenStart">
            <inheritdoc/>
        </member>
        <member name="P:PropertiesDotNet.Core.PropertiesReader.TokenEnd">
            <inheritdoc/>
        </member>
        <member name="P:PropertiesDotNet.Core.PropertiesReader.HasLineInfo">
            <inheritdoc/>
        </member>
        <member name="P:PropertiesDotNet.Core.PropertiesReader.CommentHandle">
            <summary>
            Returns the comment handle for the current token. This handle is either an
            exclamation mark (!) or a pound symbol (#) or null if the current token is not a comment.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesReader.#ctor(System.String,PropertiesDotNet.Core.PropertiesReaderSettings)">
            <summary>
            Creates a new <see cref="T:PropertiesDotNet.Core.PropertiesReader"/>.
            </summary>
            <param name="document">The .properties document as a string.</param>
            <param name="settings">The settings for this reader.</param>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesReader.#ctor(System.IO.Stream,PropertiesDotNet.Core.PropertiesReaderSettings)">
            <summary>
            Creates a new <see cref="T:PropertiesDotNet.Core.PropertiesReader"/>.
            </summary>
            <param name="input">The input document.</param>
            <param name="settings">The settings for this reader.</param>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesReader.#ctor(System.IO.TextReader,PropertiesDotNet.Core.PropertiesReaderSettings)">
            <summary>
            Creates a new <see cref="T:PropertiesDotNet.Core.PropertiesReader"/>.
            </summary>
            <param name="input">The input document.</param>
            <param name="settings">The settings for this reader.</param>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesReader.FromFile(System.String,PropertiesDotNet.Core.PropertiesReaderSettings)">
            <summary>
            Creates a new <see cref="T:PropertiesDotNet.Core.PropertiesReader"/> from the file <paramref name="path"/>.
            </summary>
            <param name="path">The file path of the input document.</param>
            <param name="settings">The settings for this reader.</param>
            <returns>An appropriate <see cref="T:PropertiesDotNet.Core.PropertiesReader"/>.</returns>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesReader.FromFile(System.IO.FileInfo,PropertiesDotNet.Core.PropertiesReaderSettings)">
            <summary>
            Creates a new <see cref="T:PropertiesDotNet.Core.PropertiesReader"/> from the <paramref name="file"/>.
            </summary>
            <param name="file">The input document.</param>
            <param name="settings">The settings for this reader.</param>
            <returns>An appropriate <see cref="T:PropertiesDotNet.Core.PropertiesReader"/>.</returns>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesReader.MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesReader.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:PropertiesDotNet.Core.PropertiesReaderSettings">
            <summary>
            Provides settings for an <see cref="T:PropertiesDotNet.Core.IPropertiesReader"/>. Inheriting this class allows for
            additional custom settings on top of the defaults.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Core.PropertiesReaderSettings.IgnoreComments">
            <summary>
            Whether an <see cref="T:PropertiesDotNet.Core.IPropertiesReader"/> should ignore document comments.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Core.PropertiesReaderSettings.InvalidEscapes">
            <summary>
            Whether an <see cref="T:PropertiesDotNet.Core.IPropertiesReader"/> should error on invalid character escapes.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Core.PropertiesReaderSettings.AllUnicodeEscapes">
            <summary>
            Whether a <see cref="T:PropertiesDotNet.Core.IPropertiesReader"/> should allow all Unicode escape identifiers,
            including '\x' and '\U', rather than only '\u'.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Core.PropertiesReaderSettings.AllCharacters">
            <summary>
            Whether an <see cref="T:PropertiesDotNet.Core.IPropertiesReader"/> should allow all characters, or only characters from the
            "ISO-8859-1" character set.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Core.PropertiesReaderSettings.ThrowOnError">
            <summary>
            Whether a <see cref="T:PropertiesDotNet.Core.PropertiesException"/> should be thrown whenever an <see cref="T:PropertiesDotNet.Core.IPropertiesReader"/> encounters
            an error in a ".properties" document, or if an <see cref="F:PropertiesDotNet.Core.PropertiesTokenType.Error"/> should be produced.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Core.PropertiesReaderSettings.CloseOnEnd">
            <summary>
            Whether an <see cref="T:PropertiesDotNet.Core.IPropertiesReader"/> should close the underlying stream when a <see cref="F:PropertiesDotNet.Core.PropertiesTokenType.Error"/>
            is produced or the end of the document is reached.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Core.PropertiesReaderSettings.Default">
            <summary>
            Returns a <see cref="T:PropertiesDotNet.Core.PropertiesReaderSettings"/> with the default settings.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Core.PropertiesReaderSettings.Optimized">
            <summary>
            Returns a <see cref="T:PropertiesDotNet.Core.PropertiesReaderSettings"/> with settings optimized for performance.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesReaderSettings.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new <see cref="T:PropertiesDotNet.Core.PropertiesReaderSettings"/> with the given settings.
            </summary>
            <param name="ignoreComments">Whether an <see cref="T:PropertiesDotNet.Core.IPropertiesReader"/> should ignore document comments.</param>
            <param name="invalidEscapes">Whether an <see cref="T:PropertiesDotNet.Core.IPropertiesReader"/> should error on invalid character escapes. The specification mandates
            this setting be true; only change if you wish to deal with the errors manually.</param>
            <param name="allUnicodeEscapes">Whether a <see cref="T:PropertiesDotNet.Core.IPropertiesReader"/> should allow all Unicode escape identifiers,
            including '\x' and '\U', rather than only '\u'.</param>
            <param name="allCharacters">Whether an <see cref="T:PropertiesDotNet.Core.IPropertiesReader"/> should allow all characters, or only characters from the
            "ISO-8859-1" character set.</param>
            <param name="throwOnError">Whether a <see cref="T:PropertiesDotNet.Core.PropertiesException"/> should be thrown whenever a <see cref="T:PropertiesDotNet.Core.IPropertiesReader"/> encounters
            an error in a ".properties" document, or if an <see cref="F:PropertiesDotNet.Core.PropertiesTokenType.Error"/> should be produced.</param>
            <param name="closeOnEnd">Whether an <see cref="T:PropertiesDotNet.Core.IPropertiesReader"/> should close the underlying stream when a <see cref="F:PropertiesDotNet.Core.PropertiesTokenType.Error"/>
            is produced or the end of the document is reached.</param>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesReaderSettings.CopyFrom(PropertiesDotNet.Core.PropertiesReaderSettings)">
            <summary>
            Copies the configuration of the <paramref name="settings"/> into this instance.
            </summary>
            <param name="settings">The settings to copy.</param>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesReaderSettings.Equals(PropertiesDotNet.Core.PropertiesReaderSettings)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesReaderSettings.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesReaderSettings.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:PropertiesDotNet.Core.PropertiesToken">
            <summary>
            Represents a token in a ".properties" document.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Core.PropertiesToken.Type">
            <summary>
            The type of this token.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Core.PropertiesToken.Text">
            <summary>
            The textual value of this token.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Core.PropertiesToken.Canonical">
            <summary>
            A property returning whether this token is canonical to a ".properties" document (i.e, is
            within the specification).
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesToken.#ctor(PropertiesDotNet.Core.PropertiesTokenType,System.String)">
            <summary>
            Creates a new ".properties" document token.
            </summary>
            <param name="type">The type of this token.</param>
            <param name="value">The textual value of this token.</param>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesToken.Equals(PropertiesDotNet.Core.PropertiesToken)">
            <summary>
            Checks if these <see cref="T:PropertiesDotNet.Core.PropertiesToken"/>s are equal.
            </summary>
            <param name="other">The <see cref="T:PropertiesDotNet.Core.PropertiesToken"/> to check.</param>
            <returns>true if they are equal; false otherwise.</returns>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesToken.Equals(System.Nullable{PropertiesDotNet.Core.PropertiesToken})">
            <summary>
            Checks if these <see cref="T:PropertiesDotNet.Core.PropertiesToken"/>s are equal.
            </summary>
            <param name="other">The <see cref="T:PropertiesDotNet.Core.PropertiesToken"/> to check.</param>
            <returns>true if they are equal; false otherwise.</returns>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesToken.op_Equality(System.Nullable{PropertiesDotNet.Core.PropertiesToken},System.Nullable{PropertiesDotNet.Core.PropertiesToken})">
            <summary>
            Checks if these <see cref="T:PropertiesDotNet.Core.PropertiesToken"/>s are equal.
            </summary>
            <param name="token">The first token.</param>
            <param name="other">The <see cref="T:PropertiesDotNet.Core.PropertiesToken"/> to check.</param>
            <returns>true if they are equal; false otherwise.</returns>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesToken.op_Inequality(System.Nullable{PropertiesDotNet.Core.PropertiesToken},System.Nullable{PropertiesDotNet.Core.PropertiesToken})">
            <summary>
            Checks if these <see cref="T:PropertiesDotNet.Core.PropertiesToken"/>s are not equal.
            </summary>
            <param name="token">The first token.</param>
            <param name="other">The <see cref="T:PropertiesDotNet.Core.PropertiesToken"/> to check.</param>
            <returns>true if they are not equal; false otherwise.</returns>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesToken.ToString">
            <summary>
            Returns this token as a string.
            </summary>
            <returns>The this token as a string.</returns>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesToken.GetHashCode">
            <summary>
            Returns the hash code for this token.
            </summary>
            <returns>The hash code for this token.</returns>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesToken.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesToken.Comment(System.String)">
            <summary>
            Creates a new comment token.
            </summary>
            <param name="value">The text content of the comment.</param>
            <returns>A new comment token.</returns>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesToken.Key(System.String)">
            <summary>
            Creates a new key token.
            </summary>
            <param name="key">The text content of the key.</param>
            <returns>A new key token.</returns>
            <exception cref="T:System.ArgumentException">If the key is <see langword="null"/> or empty.</exception>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesToken.Assigner(System.Nullable{System.Char})">
            <summary>
            Creates a new assigner token.
            </summary>
            <param name="assigner">The value of the assigner.</param>
            <returns>A new assigner token.</returns>
            <exception cref="T:System.ArgumentException">If the assigner is not '=', ':' or a white-space.</exception>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesToken.Value(System.String)">
            <summary>
            Creates a new value token.
            </summary>
            <param name="value">The text content of the value.</param>
            <returns>A new value token.</returns>
        </member>
        <member name="T:PropertiesDotNet.Core.PropertiesTokenType">
            <summary>
            Represents the types of tokens in a .properties docuemnt.
            </summary>
        </member>
        <member name="F:PropertiesDotNet.Core.PropertiesTokenType.None">
            <summary>
            A <see langword="null"/> value. Returned when an <see cref="T:PropertiesDotNet.Core.IPropertiesReader"/> has not yet
            read a token (stream start).
            </summary>
        </member>
        <member name="F:PropertiesDotNet.Core.PropertiesTokenType.Error">
            <summary>
            Represents an error in a ".properties" document. This token is not canonical.
            </summary>
        </member>
        <member name="F:PropertiesDotNet.Core.PropertiesTokenType.Comment">
            <summary>
            Represents a comment in a ".properties" document. In a standard ".properties"
            document comment indicators begin with either a "!" or "#".
            </summary>
        </member>
        <member name="F:PropertiesDotNet.Core.PropertiesTokenType.Key">
            <summary>
            Represents a key in a ".properties" document.
            </summary>
        </member>
        <member name="F:PropertiesDotNet.Core.PropertiesTokenType.Assigner">
            <summary>
            Represents a value assigner in a ".properties" document. This can either be a 
            ":" (colon), "=" (equals), or any type of whitespace.
            </summary>
        </member>
        <member name="F:PropertiesDotNet.Core.PropertiesTokenType.Value">
            <summary>
            Represents a value in a ".properties" document.
            </summary>
        </member>
        <member name="T:PropertiesDotNet.Core.PropertiesWriter">
            <summary>
            Represents a class that writes <see cref="T:PropertiesDotNet.Core.PropertiesToken"/>s into a stream as text.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Core.PropertiesWriter.Settings">
            <inheritdoc/>
        </member>
        <member name="E:PropertiesDotNet.Core.PropertiesWriter.TokenWritten">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesWriter.#ctor(System.Text.StringBuilder,PropertiesDotNet.Core.PropertiesWriterSettings)">
            <summary>
            Creates a new <see cref="T:PropertiesDotNet.Core.PropertiesWriter"/>.
            </summary>
            <param name="output">The output stream.</param>
            <param name="settings">The settings for this writer.</param>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesWriter.#ctor(System.IO.Stream,PropertiesDotNet.Core.PropertiesWriterSettings)">
            <summary>
            Creates a new <see cref="T:PropertiesDotNet.Core.PropertiesWriter"/>.
            </summary>
            <param name="output">The output stream.</param>
            <param name="settings">The settings for this writer.</param>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesWriter.#ctor(System.String,PropertiesDotNet.Core.PropertiesWriterSettings)">
            <summary>
            Creates a new <see cref="T:PropertiesDotNet.Core.PropertiesWriter"/> that writes to the <paramref name="path"/>.
            </summary>
            <param name="path">The path to the .properties file.</param>
            <param name="settings">The settings for this writer.</param>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesWriter.#ctor(System.IO.TextWriter,PropertiesDotNet.Core.PropertiesWriterSettings)">
            <summary>
            Creates a new <see cref="T:PropertiesDotNet.Core.PropertiesWriter"/>.
            </summary>
            <param name="output">The output stream.</param>
            <param name="settings">The settings for this writer.</param>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesWriter.Write(PropertiesDotNet.Core.PropertiesToken)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesWriter.WriteComment(System.String)">
            <summary>
            Writes a document comment.
            </summary>
            <param name="value">The text content of the comment.</param>
            <returns>true if the comment could be written; false otherwise.</returns>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If the comment could not be written and errors are configured to be
            thrown.</exception>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesWriter.WriteComment(System.Char,System.String)">
            <summary>
            Writes a document comment.
            </summary>
            <param name="handle">The comment handle. This must be either a '#' or '!'.</param>
            <param name="value">The text content of the comment.</param>
            <returns>true if the comment could be written; false otherwise.</returns>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If the comment could not be written and errors are configured to be
            thrown.</exception>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesWriter.WriteKey(System.String,System.Boolean)">
            <summary>
            Writes a new key.
            </summary>
            <param name="key">The value of the key. This cannot be <see langword="null"/>.</param>
            <param name="logicalLines">Whether to emit line escapes as logical lines.</param>
            <returns>true if the key could be written; false otherwise.</returns>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesWriter.WriteAssigner(System.Char)">
            <summary>
            Writes a new assigner.
            </summary>
            <param name="assigner">The assigner value.</param>
            <returns>true if the assigner could be written; false otherwise.</returns>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If the assigner could not be written and errors are configured to be
            thrown.</exception>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesWriter.WriteValue(System.String,System.Boolean)">
            <summary>
            Writes a new value.
            </summary>
            <param name="value">The content of the value.</param>
            <param name="logicalLines">Whether to emit line escapes as logical lines.</param>
            <returns>true if the value could be written; false otherwise.</returns>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesWriter.WriteProperty(System.String,System.String)">
            <summary>
            Writes a new property.
            </summary>
            <param name="key">The key for the property</param>
            <param name="value">The value of the property.</param>
            <returns>true if the property could be written; false otherwise.</returns>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesWriter.WriteProperty(System.String,System.Char,System.String)">
            <summary>
            Writes a new property.
            </summary>
            <param name="key">The key for the property</param>
            <param name="assigner">The assignement character used for this property.</param>
            <param name="value">The value of the property.</param>
            <returns>true if the property could be written; false otherwise.</returns>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesWriter.Flush">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesWriter.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:PropertiesDotNet.Core.PropertiesWriterSettings">
            <summary>
            Provides settings for an <see cref="T:PropertiesDotNet.Core.IPropertiesWriter"/>.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Core.PropertiesWriterSettings.IgnoreComments">
            <summary>
            Whether an <see cref="T:PropertiesDotNet.Core.IPropertiesWriter"/> should ignore document comments.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Core.PropertiesWriterSettings.AllCharacters">
            <summary>
            Whether an <see cref="T:PropertiesDotNet.Core.IPropertiesWriter"/> should emit non-ISO-8859-1 characters as is or as a
            unicode escape sequence.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Core.PropertiesWriterSettings.AllUnicodeEscapes">
            <summary>
            Whether an <see cref="T:PropertiesDotNet.Core.IPropertiesWriter"/> should output the '\U' unicode identifier, 
            rather than only '\u', for larger code-points.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Core.PropertiesWriterSettings.ThrowOnError">
            <summary>
            Whether a <see cref="T:PropertiesDotNet.Core.PropertiesException"/> should be thrown whenever an <see cref="T:PropertiesDotNet.Core.IPropertiesWriter"/> is passed
            an incorrect token as an argument, depending on the context.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Core.PropertiesWriterSettings.CloseOnEnd">
            <summary>
            Whether an <see cref="T:PropertiesDotNet.Core.IPropertiesWriter"/> should close the underlying stream when it is disposed.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Core.PropertiesWriterSettings.AutoFlush">
            <summary>
            Whether an <see cref="T:PropertiesDotNet.Core.IPropertiesWriter"/> should automatically flush after 
            <see cref="M:PropertiesDotNet.Core.IPropertiesWriter.Write(PropertiesDotNet.Core.PropertiesToken)"/> has been called <see cref="P:PropertiesDotNet.Core.PropertiesWriterSettings.FlushInterval"/> number of times.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Core.PropertiesWriterSettings.FlushInterval">
            <summary>
            The number of <see cref="M:PropertiesDotNet.Core.IPropertiesWriter.Write(PropertiesDotNet.Core.PropertiesToken)"/> operations between each 
            automatic <see cref="M:PropertiesDotNet.Core.IPropertiesWriter.Flush"/>. This only applies if <see cref="P:PropertiesDotNet.Core.PropertiesWriterSettings.AutoFlush"/> is true.
            Must be greater than 0.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Core.PropertiesWriterSettings.Default">
            <summary>
            Returns a <see cref="T:PropertiesDotNet.Core.PropertiesWriterSettings"/> with the default settings.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesWriterSettings.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.UInt32)">
            <summary>
            Creates a <see cref="T:PropertiesDotNet.Core.PropertiesWriterSettings"/> with the given settings.
            </summary>
            <param name="ignoreComments">Whether an <see cref="T:PropertiesDotNet.Core.IPropertiesWriter"/> should ignore document comments.</param>
            <param name="allCharacters">Whether an <see cref="T:PropertiesDotNet.Core.IPropertiesWriter"/> should allow all characters, or only characters from the
            "ISO-8859-1" character set.</param>
            <param name="allUnicodeEscapes">Whether an <see cref="T:PropertiesDotNet.Core.IPropertiesWriter"/> should output the '\U' unicode identifier, 
            rather than only '\u', for larger code-points.</param>
            <param name="throwOnError">Whether a <see cref="T:PropertiesDotNet.Core.PropertiesException"/> should be thrown whenever an <see cref="T:PropertiesDotNet.Core.IPropertiesWriter"/> is passed
            an incorrect token as an argument, depending on the context.</param>
            <param name="closeOnEnd">Whether an <see cref="T:PropertiesDotNet.Core.IPropertiesWriter"/> should close the underlying stream when it is disposed.</param>
            <param name="autoFlush">Whether an <see cref="T:PropertiesDotNet.Core.IPropertiesWriter"/> should automatically flush after 
            <see cref="M:PropertiesDotNet.Core.IPropertiesWriter.Write(PropertiesDotNet.Core.PropertiesToken)"/> has been called <see cref="P:PropertiesDotNet.Core.PropertiesWriterSettings.FlushInterval"/> number of times.</param>
            <param name="flushInterval">The number of <see cref="M:PropertiesDotNet.Core.IPropertiesWriter.Write(PropertiesDotNet.Core.PropertiesToken)"/> operations between each 
            automatic <see cref="M:PropertiesDotNet.Core.IPropertiesWriter.Flush"/>. This only applies if <see cref="P:PropertiesDotNet.Core.PropertiesWriterSettings.AutoFlush"/> is true.
            Must be greater than 0.</param>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesWriterSettings.CopyFrom(PropertiesDotNet.Core.PropertiesWriterSettings)">
            <summary>
            Copies the configuration of the <paramref name="settings"/> into this instance.
            </summary>
            <param name="settings">The settings to copy.</param>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesWriterSettings.Equals(PropertiesDotNet.Core.PropertiesWriterSettings)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesWriterSettings.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Core.PropertiesWriterSettings.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:PropertiesDotNet.Core.StreamMark">
            <summary>
            Represents a position or mark in a stream.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Core.StreamMark.AbsoluteOffset">
            <summary>
            Returns the absolute character offset in the stream, starting at 0 or null if this mark does not support character offsets.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Core.StreamMark.Line">
            <summary>
            Returns the line number, starting at 1.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Core.StreamMark.Column">
            <summary>
            Returns column number, starting at 1.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Core.StreamMark.XOffset">
            <summary>
            Returns column number, starting at 0.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Core.StreamMark.YOffset">
            <summary>
            Returns the line number, starting at 0.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Core.StreamMark.#ctor(System.UInt64,System.UInt32,System.Nullable{System.UInt64})">
            <summary>
            Creates a <see cref="T:PropertiesDotNet.Core.StreamMark"/>.
            </summary>
            <param name="line">The line number.</param>
            <param name="column">The column number.</param>
            <param name="absoluteOffset">The absolute offset.</param>
        </member>
        <member name="M:PropertiesDotNet.Core.StreamMark.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes a <see cref="T:PropertiesDotNet.Core.StreamMark"/>.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:PropertiesDotNet.Core.StreamMark.CompareTo(PropertiesDotNet.Core.StreamMark)">
            <summary>
            Respectively returns -1, 0, or 1 if this <see cref="T:PropertiesDotNet.Core.StreamMark"/> is less than,
            equal to, or greater than the <paramref name="other"/>.
            </summary>
            <param name="other">The <see cref="T:PropertiesDotNet.Core.StreamMark"/> to compare.</param>
            <returns>-1, 0, or 1 if this <see cref="T:PropertiesDotNet.Core.StreamMark"/> is less than,
            equal to, or greater than the <paramref name="other"/>.</returns>
        </member>
        <member name="M:PropertiesDotNet.Core.StreamMark.CompareTo(PropertiesDotNet.Core.StreamMark@)">
            <summary>
            Respectively returns -1, 0, or 1 if this <see cref="T:PropertiesDotNet.Core.StreamMark"/> is less than,
            equal to, or greater than the <paramref name="other"/>.
            </summary>
            <param name="other">The <see cref="T:PropertiesDotNet.Core.StreamMark"/> to compare.</param>
            <returns>-1, 0, or 1 if this <see cref="T:PropertiesDotNet.Core.StreamMark"/> is less than,
            equal to, or greater than the <paramref name="other"/>.</returns>
        </member>
        <member name="M:PropertiesDotNet.Core.StreamMark.Equals(PropertiesDotNet.Core.StreamMark)">
            <summary>
            Checks if these <see cref="T:PropertiesDotNet.Core.StreamMark"/>s are equal.
            </summary>
            <param name="other">The <see cref="T:PropertiesDotNet.Core.StreamMark"/> to check.</param>
            <returns>true if they are equal; false otherwise.</returns>
        </member>
        <member name="M:PropertiesDotNet.Core.StreamMark.Equals(System.Nullable{PropertiesDotNet.Core.StreamMark})">
            <summary>
            Checks if these <see cref="T:PropertiesDotNet.Core.StreamMark"/>s are equal.
            </summary>
            <param name="other">The <see cref="T:PropertiesDotNet.Core.StreamMark"/> to check.</param>
            <returns>true if they are equal; false otherwise.</returns>
        </member>
        <member name="M:PropertiesDotNet.Core.StreamMark.Equals(PropertiesDotNet.Core.StreamMark@)">
            <summary>
            Checks if these <see cref="T:PropertiesDotNet.Core.StreamMark"/>s are equal.
            </summary>
            <param name="other">The <see cref="T:PropertiesDotNet.Core.StreamMark"/> to check.</param>
            <returns>true if they are equal; false otherwise.</returns>
        </member>
        <member name="M:PropertiesDotNet.Core.StreamMark.op_Equality(System.Nullable{PropertiesDotNet.Core.StreamMark},System.Nullable{PropertiesDotNet.Core.StreamMark})">
            <summary>
            Checks if these <see cref="T:PropertiesDotNet.Core.StreamMark"/>s are equal.
            </summary>
            <param name="mark">The first mark.</param>
            <param name="other">The <see cref="T:PropertiesDotNet.Core.StreamMark"/> to check.</param>
            <returns>true if they are equal; false otherwise.</returns>
        </member>
        <member name="M:PropertiesDotNet.Core.StreamMark.op_Addition(PropertiesDotNet.Core.StreamMark,PropertiesDotNet.Core.StreamMark)">
            <summary>
            Adds these <see cref="T:PropertiesDotNet.Core.StreamMark"/>s.
            </summary>
            <param name="mark">The first mark.</param>
            <param name="other">The <see cref="T:PropertiesDotNet.Core.StreamMark"/> to add.</param>
            <returns>A new <see cref="T:PropertiesDotNet.Core.StreamMark"/> with the added value.</returns>
        </member>
        <member name="M:PropertiesDotNet.Core.StreamMark.op_Addition(System.Nullable{PropertiesDotNet.Core.StreamMark},System.Nullable{PropertiesDotNet.Core.StreamMark})">
            <summary>
            Adds these <see cref="T:PropertiesDotNet.Core.StreamMark"/>s.
            </summary>
            <param name="mark">The first mark.</param>
            <param name="other">The <see cref="T:PropertiesDotNet.Core.StreamMark"/> to add.</param>
            <returns>A new <see cref="T:PropertiesDotNet.Core.StreamMark"/> with the added value.</returns>
        </member>
        <member name="M:PropertiesDotNet.Core.StreamMark.op_Subtraction(PropertiesDotNet.Core.StreamMark,PropertiesDotNet.Core.StreamMark)">
            <summary>
            Subtracts these <see cref="T:PropertiesDotNet.Core.StreamMark"/>s.
            </summary>
            <param name="mark">The first mark.</param>
            <param name="other">The <see cref="T:PropertiesDotNet.Core.StreamMark"/> to subtract.</param>
            <returns>A new <see cref="T:PropertiesDotNet.Core.StreamMark"/> with the subtracted value.</returns>
        </member>
        <member name="M:PropertiesDotNet.Core.StreamMark.op_Subtraction(System.Nullable{PropertiesDotNet.Core.StreamMark},System.Nullable{PropertiesDotNet.Core.StreamMark})">
            <summary>
            Subtracts these <see cref="T:PropertiesDotNet.Core.StreamMark"/>s.
            </summary>
            <param name="mark">The first mark.</param>
            <param name="other">The <see cref="T:PropertiesDotNet.Core.StreamMark"/> to subtract.</param>
            <returns>A new <see cref="T:PropertiesDotNet.Core.StreamMark"/> with the subtracted value.</returns>
        </member>
        <member name="M:PropertiesDotNet.Core.StreamMark.op_Inequality(System.Nullable{PropertiesDotNet.Core.StreamMark},System.Nullable{PropertiesDotNet.Core.StreamMark})">
            <summary>
            Checks if these <see cref="T:PropertiesDotNet.Core.StreamMark"/>s are not equal.
            </summary>
            <param name="mark">The first mark.</param>
            <param name="other">The <see cref="T:PropertiesDotNet.Core.StreamMark"/> to check.</param>
            <returns>true if they are not equal; false otherwise.</returns>
        </member>
        <member name="M:PropertiesDotNet.Core.StreamMark.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Core.StreamMark.ToString">
            <summary>
            Returns the current position as a string.
            </summary>
            <returns>The current position as a string.</returns>
        </member>
        <member name="M:PropertiesDotNet.Core.StreamMark.GetHashCode">
            <summary>
            Returns the hash code for this mark.
            </summary>
            <returns>The hash code for this mark.</returns>
        </member>
        <member name="M:PropertiesDotNet.Core.StreamMark.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:PropertiesDotNet.Core.UnsafePropertiesReader">
            <summary>
            A fast ".properties" document reader that implements a non-cached, 
            forward-only token generation scheme using unsafe string manipulation.
            </summary>
            <remarks>To be used in performance-critical environments.</remarks>
        </member>
        <member name="P:PropertiesDotNet.Core.UnsafePropertiesReader.Settings">
            <inheritdoc/>
        </member>
        <member name="E:PropertiesDotNet.Core.UnsafePropertiesReader.TokenRead">
            <inheritdoc/>
        </member>
        <member name="P:PropertiesDotNet.Core.UnsafePropertiesReader.Token">
            <inheritdoc/>
        </member>
        <member name="P:PropertiesDotNet.Core.UnsafePropertiesReader.TokenStart">
            <inheritdoc/>
        </member>
        <member name="P:PropertiesDotNet.Core.UnsafePropertiesReader.TokenEnd">
            <inheritdoc/>
        </member>
        <member name="P:PropertiesDotNet.Core.UnsafePropertiesReader.HasLineInfo">
            <inheritdoc/>
        </member>
        <member name="P:PropertiesDotNet.Core.UnsafePropertiesReader.CommentHandle">
            <summary>
            Returns the comment handle for the current token. This handle is either an
            exclamtion mark (!) or a pound symbol (#) or null if the current token is not a comment.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Core.UnsafePropertiesReader.#ctor(System.Char*,System.Int32,PropertiesDotNet.Core.PropertiesReaderSettings)">
            <summary>
            Creates a new <see cref="T:PropertiesDotNet.Core.UnsafePropertiesReader"/>.
            </summary>
            <param name="input">A pointer to the input document.</param>
            <param name="length">The character length of the input document.</param>
            <param name="settings">The settings for this reader.</param>
        </member>
        <member name="M:PropertiesDotNet.Core.UnsafePropertiesReader.#ctor(System.String,PropertiesDotNet.Core.PropertiesReaderSettings)">
            <summary>
            Creates a new <see cref="T:PropertiesDotNet.Core.UnsafePropertiesReader"/>.
            </summary>
            <param name="input">The input document.</param>
            <param name="settings">The settings for this reader.</param>
        </member>
        <member name="M:PropertiesDotNet.Core.UnsafePropertiesReader.MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Core.UnsafePropertiesReader.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:PropertiesDotNet.ObjectModel.PropertiesDocument">
            <summary>
            Represents a ".properties" document.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.ObjectModel.PropertiesDocument.Count">
            <summary>
            Returns the number of properties within this document.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.#ctor">
            <summary>
            Creates a new <see cref="T:PropertiesDotNet.ObjectModel.PropertiesDocument"/>.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.#ctor(System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Creates a new <see cref="T:PropertiesDotNet.ObjectModel.PropertiesDocument"/>.
            </summary>
            <param name="properties">The properties to include in this document.</param>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Creates a new <see cref="T:PropertiesDotNet.ObjectModel.PropertiesDocument"/>.
            </summary>
            <param name="properties">The properties to include in this document.</param>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.#ctor(System.Collections.Generic.IEnumerable{PropertiesDotNet.ObjectModel.PropertiesProperty})">
            <summary>
            Creates a new <see cref="T:PropertiesDotNet.ObjectModel.PropertiesDocument"/>.
            </summary>
            <param name="properties">The properties to include in this document.</param>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Creates a new <see cref="T:PropertiesDotNet.ObjectModel.PropertiesDocument"/> from the given data.
            </summary>
            <param name="stream">The stream containing document data.</param>
            <param name="overwrite">Whether to override duplicate properties.</param>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.#ctor(System.IO.TextReader,System.Boolean)">
            <summary>
            Creates a new <see cref="T:PropertiesDotNet.ObjectModel.PropertiesDocument"/> from the given data.
            </summary>
            <param name="reader">The reader containing document data.</param>
            <param name="overwrite">Whether to override duplicate properties.</param>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.#ctor(PropertiesDotNet.Core.IPropertiesReader,System.Boolean)">
            <summary>
            Creates a new <see cref="T:PropertiesDotNet.ObjectModel.PropertiesDocument"/> from the given data.
            </summary>
            <param name="reader">The document data.</param>
            <param name="overwrite">Whether to override duplicate properties.</param>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.Load(System.String,System.Boolean)">
            <summary>
            Loads this document from the given .properties document.
            </summary>
            <param name="document">The .properties document as a string.</param>
            <param name="overwrite">Whether to override duplicate properties.</param>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.LoadFile(System.String,System.Boolean)">
            <summary>
            Loads this document from the given .properties file.
            </summary>
            <param name="path">The file path of the input document.</param>
            <param name="overwrite">Whether to override duplicate properties.</param>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.Load(System.IO.Stream,System.Boolean)">
            <summary>
            Loads this document from the given reader.
            </summary>
            <param name="stream">The stream to load from.</param>
            <param name="overwrite">Whether to override duplicate properties.</param>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.Load(System.IO.TextReader,System.Boolean)">
            <summary>
            Loads this document from the given reader.
            </summary>
            <param name="reader">The reader to load from.</param>
            <param name="overwrite">Whether to override duplicate properties.</param>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.Load(PropertiesDotNet.Core.IPropertiesReader,System.Boolean)">
            <summary>
            Loads this document from the given reader.
            </summary>
            <param name="reader">The reader to load from.</param>
            <param name="overwrite">Whether to override duplicate properties.</param>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.LoadDocument(System.String,System.Boolean)">
            <summary>
            Loads this document from the given .properties document.
            </summary>
            <param name="document">The .properties document as a string.</param>
            <param name="overwrite">Whether to override existing properties.</param>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.LoadFileDocument(System.String,System.Boolean)">
            <summary>
            Loads this document from the given .properties file.
            </summary>
            <param name="path">The file path of the input document.</param>
            <param name="overwrite">Whether to override existing properties.</param>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.LoadDocument(System.IO.Stream,System.Boolean)">
            <summary>
            Loads this document from the given reader.
            </summary>
            <param name="stream">The stream to load from.</param>
            <param name="overwrite">Whether to override existing properties.</param>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.LoadDocument(System.IO.TextReader,System.Boolean)">
            <summary>
            Loads this document from the given reader.
            </summary>
            <param name="reader">The reader to load from.</param>
            <param name="overwrite">Whether to override existing properties.</param>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.LoadDocument(PropertiesDotNet.Core.IPropertiesReader,System.Boolean)">
            <summary>
            Loads this document from the given reader.
            </summary>
            <param name="reader">The reader to load from.</param>
            <param name="overwrite">Whether to override existing properties.</param>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.Clear">
            <summary>
            Clears all the properties from this document.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.AddProperty(System.String,System.String)">
            <summary>
            Adds the specified property to this document, if it does not already contain a property with the same key.
            </summary>
            <param name="key">The property key.</param>
            <param name="value">The property value.</param>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.Add(PropertiesDotNet.ObjectModel.PropertiesProperty)">
            <summary>
            Adds the specified property to this document, if it does not already contain a property with the same key.
            </summary>
            <param name="property">The property to add.</param>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.SetProperty(PropertiesDotNet.ObjectModel.PropertiesProperty)">
            <summary>
            Sets the specified property within this document; overrides if a property with the same key already exists.
            </summary>
            <param name="property">The property to set.</param>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.GetProperty(System.String)">
            <summary>
            Gets the specified property, if it exists inside this document.
            </summary>
            <param name="key">The property key.</param>
            <returns>The specified property, if it exists.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property key is not found.</exception>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.GetValue(System.String)">
            <summary>
            Gets the specified property value, if it exists inside this document.
            </summary>
            <param name="key">The property key.</param>
            <returns>The specified property's value, if it exists.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property key is not found.</exception>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.GetBool(System.String)">
            <summary>
            Gets the specified property value as a <see langword="bool"/>, if it exists inside this document.
            </summary>
            <param name="key">The property key.</param>
            <returns>The specified property's value, if it exists.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property key is not found.</exception>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.GetByte(System.String)">
            <summary>
            Gets the specified property value as a <see langword="byte"/>, if it exists inside this document.
            </summary>
            <param name="key">The property key.</param>
            <returns>The specified property's value, if it exists.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property key is not found.</exception>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.GetSByte(System.String)">
            <summary>
            Gets the specified property value as a <see langword="sbyte"/>, if it exists inside this document.
            </summary>
            <param name="key">The property key.</param>
            <returns>The specified property's value, if it exists.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property key is not found.</exception>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.GetInt16(System.String)">
            <summary>
            Gets the specified property value as a <see langword="short"/>, if it exists inside this document.
            </summary>
            <param name="key">The property key.</param>
            <returns>The specified property's value, if it exists.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property key is not found.</exception>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.GetUInt16(System.String)">
            <summary>
            Gets the specified property value as a <see langword="ushort"/>, if it exists inside this document.
            </summary>
            <param name="key">The property key.</param>
            <returns>The specified property's value, if it exists.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property key is not found.</exception>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.GetInt32(System.String)">
            <summary>
            Gets the specified property value as a <see langword="int"/>, if it exists inside this document.
            </summary>
            <param name="key">The property key.</param>
            <returns>The specified property's value, if it exists.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property key is not found.</exception>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.GetUInt32(System.String)">
            <summary>
            Gets the specified property value as a <see langword="uint"/>, if it exists inside this document.
            </summary>
            <param name="key">The property key.</param>
            <returns>The specified property's value, if it exists.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property key is not found.</exception>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.GetInt64(System.String)">
            <summary>
            Gets the specified property value as a <see langword="long"/>, if it exists inside this document.
            </summary>
            <param name="key">The property key.</param>
            <returns>The specified property's value, if it exists.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property key is not found.</exception>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.GetUInt64(System.String)">
            <summary>
            Gets the specified property value as a <see langword="ulong"/>, if it exists inside this document.
            </summary>
            <param name="key">The property key.</param>
            <returns>The specified property's value, if it exists.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property key is not found.</exception>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.GetFloat(System.String)">
            <summary>
            Gets the specified property value as a <see langword="float"/>, if it exists inside this document.
            </summary>
            <param name="key">The property key.</param>
            <returns>The specified property's value, if it exists.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property key is not found.</exception>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.GetDouble(System.String)">
            <summary>
            Gets the specified property value as a <see langword="double"/>, if it exists inside this document.
            </summary>
            <param name="key">The property key.</param>
            <returns>The specified property's value, if it exists.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property key is not found.</exception>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.GetDecimal(System.String)">
            <summary>
            Gets the specified property value as a <see langword="decimal"/>, if it exists inside this document.
            </summary>
            <param name="key">The property key.</param>
            <returns>The specified property's value, if it exists.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property key is not found.</exception>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.TryGetProperty(System.String,PropertiesDotNet.ObjectModel.PropertiesProperty@)">
            <summary>
            Attempts to get specified property.
            </summary>
            <param name="key">The property key.</param>
            <param name="property">The retrieved property.</param>
            <returns>true if the property with the specified <paramref name="key"/> was found; otherwise false.</returns>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.TryGetValue(System.String,System.String@)">
            <summary>
            Attempts to get specified property value.
            </summary>
            <param name="key">The property key.</param>
            <param name="value">The retrieved value.</param>
            <returns>true if the property with the specified <paramref name="key"/> was found; otherwise false.</returns>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.ContainsKey(System.String)">
            <summary>
            Checks whether this document contains the specified key.
            </summary>
            <param name="key">The property key to check for.</param>
            <returns>Whether this document contains the specified property.</returns>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.Contains(PropertiesDotNet.ObjectModel.PropertiesProperty)">
            <summary>
            Checks whether this document contains the specified property.
            </summary>
            <param name="property">The property to check for.</param>
            <returns>Whether this document contains the specified property.</returns>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.Remove(System.String)">
            <summary>
            Removes the property with the specified <paramref name="key"/> from this document.
            </summary>
            <param name="key">The property key.</param>
            <returns>true if the property was removed; false otherwise.</returns>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.Remove(PropertiesDotNet.ObjectModel.PropertiesProperty)">
            <summary>
            Removes the specified property from this document.
            </summary>
            <param name="property">The property to remove.</param>
            <returns>true if the property was removed; false otherwise.</returns>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.RemoveAt(System.Int32)">
            <summary>
            Removes the property at the specified <paramref name="index"/>.
            </summary>
            <param name="index">The index of the property to remove.</param>
            <returns>true if the property was removed; false otherwise.</returns>
        </member>
        <member name="P:PropertiesDotNet.ObjectModel.PropertiesDocument.Item(System.String)">
            <summary>
            Gets or sets the specified property.
            </summary>
            <param name="key">The property key to get.</param>
            <returns>The specified property, if it exists.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property key is not found.</exception>
        </member>
        <member name="P:PropertiesDotNet.ObjectModel.PropertiesDocument.Item(System.Int32)">
            <summary>
            Gets or sets the specified property.
            </summary>
            <param name="index">The index of the property to get.</param>
            <returns>The specified property, if it exists.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If the index is out of range.</exception>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.Save(System.String,System.Boolean)">
            <summary>
            Saves this document into the file.
            </summary>
            <param name="path">The file path.</param>
            <param name="timestamp">Whether to output a timestamp at the begining of the document.</param>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.Save(System.IO.Stream,System.Boolean)">
            <summary>
            Saves this document into the specified stream.
            </summary>
            <param name="stream">The stream to save this document into.</param>
            <param name="timestamp">Whether to output a timestamp at the begining of the document.</param>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.Save(System.IO.TextWriter,System.Boolean)">
            <summary>
            Saves this document into the specified writer.
            </summary>
            <param name="writer">The writer to save this document into.</param>
            <param name="timestamp">Whether to output a timestamp at the begining of the document.</param>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.Save(PropertiesDotNet.Core.IPropertiesWriter,System.Boolean)">
            <summary>
            Saves this document into the specified writer.
            </summary>
            <param name="writer">The writer to save this document into.</param>
            <param name="timestamp">Whether to output a timestamp at the begining of the document.</param>
        </member>
        <member name="P:PropertiesDotNet.ObjectModel.PropertiesDocument.Keys">
            <inheritdoc/>
        </member>
        <member name="P:PropertiesDotNet.ObjectModel.PropertiesDocument.Values">
            <inheritdoc/>
        </member>
        <member name="P:PropertiesDotNet.ObjectModel.PropertiesDocument.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:PropertiesDotNet.ObjectModel.PropertiesDocument.IsFixedSize">
            <inheritdoc/>
        </member>
        <member name="P:PropertiesDotNet.ObjectModel.PropertiesDocument.System#Collections#IDictionary#Keys">
            <inheritdoc/>
        </member>
        <member name="P:PropertiesDotNet.ObjectModel.PropertiesDocument.System#Collections#IDictionary#Values">
            <inheritdoc/>
        </member>
        <member name="P:PropertiesDotNet.ObjectModel.PropertiesDocument.IsSynchronized">
            <inheritdoc/>
        </member>
        <member name="P:PropertiesDotNet.ObjectModel.PropertiesDocument.SyncRoot">
            <inheritdoc/>
        </member>
        <member name="P:PropertiesDotNet.ObjectModel.PropertiesDocument.Item(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.Add(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.Add(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.Contains(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.String}[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.Remove(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#String}}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.Add(System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.Contains(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.System#Collections#IDictionary#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.Remove(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesDocument.CopyTo(System.Array,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:PropertiesDotNet.ObjectModel.PropertiesProperty">
            <summary>
            Represents a property within a ".properties" document.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.ObjectModel.PropertiesProperty.Key">
            <summary>
            The key for this property. This cannot be <see langword="null"/> or empty.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.ObjectModel.PropertiesProperty.Comments">
            <summary>
            A list of the comments that will be emitted above this property when it is saved within a stream.
            This is <see cref="T:System.Nullable`1"/> in order to save memory.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.ObjectModel.PropertiesProperty.Assigner">
            <summary>
            The value assigner for this property. This must be '=', ':' or any type of white-space.
            </summary>
            <remarks>The value may be \0 on a property with an empty value.</remarks>
            <exception cref="T:System.ArgumentException">If the value is not '=', ':' or any type of white-space.</exception>
        </member>
        <member name="P:PropertiesDotNet.ObjectModel.PropertiesProperty.Value">
            <summary>
            The value of this property. This can be <see langword="null"/>.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesProperty.#ctor(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Creates a new properties document property.
            </summary>
            <param name="value">The key-value pair for this property.</param>
            <exception cref="T:System.ArgumentException">If the key is <see langword="null"/> empty.</exception>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesProperty.#ctor(System.String,System.String)">
            <summary>
            Creates a new properties document property.
            </summary>
            <param name="key">The key for this property.</param>
            <param name="value">The value for this property.</param>
            <exception cref="T:System.ArgumentException">If the key is <see langword="null"/> empty.</exception>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesProperty.#ctor(System.String,System.Nullable{System.Char},System.String)">
            <summary>
            Creates a new properties document property.
            </summary>
            <param name="key">The key for this property.</param>
            <param name="assigner">The assigner for this property.</param>
            <param name="value">The value for this property.</param>
            <exception cref="T:System.ArgumentException">If the key is <see langword="null"/> empty, or 
            if the assigner is not '=', ':' or any type of white-space and the value is not null. </exception>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesProperty.#ctor(PropertiesDotNet.ObjectModel.PropertiesProperty)">
            <summary>
            Creates a duplicate properties document property.
            </summary>
            <param name="property">The property to copy.</param>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesProperty.AddComment(System.String)">
            <summary>
            Adds a comment to this property.
            </summary>
            <param name="comment">The text value of the comment.</param>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesProperty.ToString">
            <summary>
            Returns this property as it would be written within a ".properties" document.
            </summary>
            <returns>This property as it would be written within a ".properties" document</returns>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesProperty.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesProperty.Equals(PropertiesDotNet.ObjectModel.PropertiesProperty)">
            <summary>
            Returns whether this property is equal to the specified property.
            </summary>
            <param name="other">The other </param>
            <returns>true if this property is equal to the specified property; false otherwise.</returns>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesProperty.Equals(System.String,System.String)">
            <summary>
            Returns whether this property has the same key and value as specified.
            </summary>
            <param name="key">The key to check.</param>
            <param name="value">The value to check.</param>
            <returns>true if this property has the same key and value as specified; false otherwise.</returns>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesProperty.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesProperty.Equals(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesProperty.op_Equality(PropertiesDotNet.ObjectModel.PropertiesProperty,PropertiesDotNet.ObjectModel.PropertiesProperty)">
            <summary>
            Returns whether the specified properties are equal.
            </summary>
            <param name="left">The first property.</param>
            <param name="right">The second property.</param>
            <returns>true if these properties are equal; false otherwise.</returns>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesProperty.op_Inequality(PropertiesDotNet.ObjectModel.PropertiesProperty,PropertiesDotNet.ObjectModel.PropertiesProperty)">
            <summary>
            Returns whether the specified properties are not equal.
            </summary>
            <param name="left">The first property.</param>
            <param name="right">The second property.</param>
            <returns>true if these properties are equal; false otherwise.</returns>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesProperty.op_Explicit(PropertiesDotNet.ObjectModel.PropertiesProperty)~System.String">
            <summary>
            Returns this property as it would be written within a ".properties" document.
            </summary>
            <param name="property">The property.</param>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesProperty.op_Implicit(PropertiesDotNet.ObjectModel.PropertiesProperty)~System.Collections.Generic.KeyValuePair{System.String,System.String}">
            <summary>
            Returns this property as a key-value pair.
            </summary>
            <param name="property">The property.</param>
        </member>
        <member name="M:PropertiesDotNet.ObjectModel.PropertiesProperty.op_Implicit(System.Collections.Generic.KeyValuePair{System.String,System.String})~PropertiesDotNet.ObjectModel.PropertiesProperty">
            <summary>
            Transforms this key-value pair into a property.
            </summary>
            <param name="pair">The key-value pair.</param>
        </member>
        <member name="T:PropertiesDotNet.Serialization.Converters.ArrayConverter">
            <summary>
            Represents a converter for array types.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Serialization.Converters.ArrayConverter.#ctor">
            <summary>
            Creates a new <see cref="T:PropertiesDotNet.Serialization.Converters.ArrayConverter"/>.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Serialization.Converters.ArrayConverter.Accepts(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Serialization.Converters.ArrayConverter.Deserialize(PropertiesDotNet.Serialization.PropertiesSerializer,System.Type,PropertiesDotNet.Serialization.PropertiesTree.PropertiesObject)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Serialization.Converters.ArrayConverter.Serialize(PropertiesDotNet.Serialization.PropertiesSerializer,System.Type,System.Object,PropertiesDotNet.Serialization.PropertiesTree.PropertiesObject)">
            <inheritdoc/>
        </member>
        <member name="T:PropertiesDotNet.Serialization.Converters.CollectionConverter">
            <summary>
            Represents a converter for <see cref="T:System.Collections.Generic.ICollection`1"/> and <see cref="T:System.Collections.IList"/> types.
            </summary>
            <remarks>This implementation is most optimized for collections that implement <see cref="T:System.Collections.IList"/> or <see cref="T:System.Collections.Generic.IList`1"/>.
            Please attempt to do so for the greatest performance.</remarks>
        </member>
        <member name="M:PropertiesDotNet.Serialization.Converters.CollectionConverter.#ctor">
            <summary>
            Creates a new <see cref="T:PropertiesDotNet.Serialization.Converters.CollectionConverter"/>.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Serialization.Converters.CollectionConverter.Accepts(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Serialization.Converters.CollectionConverter.Deserialize(PropertiesDotNet.Serialization.PropertiesSerializer,System.Type,PropertiesDotNet.Serialization.PropertiesTree.PropertiesObject)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Serialization.Converters.CollectionConverter.Deserialize(PropertiesDotNet.Serialization.PropertiesSerializer,System.Type,System.Collections.IList,PropertiesDotNet.Serialization.PropertiesTree.PropertiesObject)">
            <summary>
            Deserializes the <paramref name="list"/> (collection) from the <paramref name="obj"/>.
            </summary>
            <param name="serializer">The underlying serializer.</param>
            <param name="itemType">The list item type.</param>
            <param name="list">A new instance of the list.</param>
            <param name="obj">The document tree.</param>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If the list could not be deserialized.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.Converters.CollectionConverter.Serialize(PropertiesDotNet.Serialization.PropertiesSerializer,System.Type,System.Object,PropertiesDotNet.Serialization.PropertiesTree.PropertiesObject)">
            <inheritdoc/>
        </member>
        <member name="T:PropertiesDotNet.Serialization.Converters.DateTimeOffsetConverter">
            <summary>
            A converter for <see cref="T:System.DateTimeOffset"/>.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Serialization.Converters.DateTimeOffsetConverter.#ctor">
            <summary>
            Creates a new <see cref="T:PropertiesDotNet.Serialization.Converters.DateTimeOffsetConverter"/>.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Serialization.Converters.DateTimeOffsetConverter.Accepts(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:PropertiesDotNet.Serialization.Converters.DateTimeOffsetConverter.Deserialize(PropertiesDotNet.Serialization.PropertiesSerializer,System.Type,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Serialization.Converters.DateTimeOffsetConverter.Serialize(PropertiesDotNet.Serialization.PropertiesSerializer,System.Type,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:PropertiesDotNet.Serialization.Converters.DictionaryConverter">
            <summary>
            Represents a converter for <see cref="T:System.Collections.Generic.IDictionary`2"/> and <see cref="T:System.Collections.IDictionary"/> types.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Serialization.Converters.DictionaryConverter.#ctor">
            <summary>
            Creates a new <see cref="T:PropertiesDotNet.Serialization.Converters.DictionaryConverter"/>.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Serialization.Converters.DictionaryConverter.Accepts(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Serialization.Converters.DictionaryConverter.Deserialize(PropertiesDotNet.Serialization.PropertiesSerializer,System.Type,PropertiesDotNet.Serialization.PropertiesTree.PropertiesObject)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Serialization.Converters.DictionaryConverter.Serialize(PropertiesDotNet.Serialization.PropertiesSerializer,System.Type,System.Object,PropertiesDotNet.Serialization.PropertiesTree.PropertiesObject)">
            <inheritdoc/>
        </member>
        <member name="T:PropertiesDotNet.Serialization.Converters.NullableTypeConverter">
            <summary>
            A converter for <see cref="T:System.Nullable`1"/> types.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Serialization.Converters.NullableTypeConverter.#ctor">
            <summary>
            Creates a new <see cref="T:PropertiesDotNet.Serialization.Converters.NullableTypeConverter"/>.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Serialization.Converters.NullableTypeConverter.Accepts(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Serialization.Converters.NullableTypeConverter.Deserialize(PropertiesDotNet.Serialization.PropertiesSerializer,System.Type,PropertiesDotNet.Serialization.PropertiesTree.PropertiesObject)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Serialization.Converters.NullableTypeConverter.Deserialize(PropertiesDotNet.Serialization.PropertiesSerializer,System.Type,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Serialization.Converters.NullableTypeConverter.Serialize(PropertiesDotNet.Serialization.PropertiesSerializer,System.Type,System.Object,PropertiesDotNet.Serialization.PropertiesTree.PropertiesObject)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Serialization.Converters.NullableTypeConverter.Serialize(PropertiesDotNet.Serialization.PropertiesSerializer,System.Type,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:PropertiesDotNet.Serialization.Converters.ObjectConverter">
            <summary>
            An object serializer for composite types.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Serialization.Converters.ObjectConverter.MemberFlags">
            <summary>
            The bindings flags for properties and fields.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Serialization.Converters.ObjectConverter.AllowFields">
            <summary>
            Whether to allow search for fields as members or only properties.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Serialization.Converters.ObjectConverter.#ctor">
            <summary>
            Creates a new instance of the default object converter.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Serialization.Converters.ObjectConverter.Accepts(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Serialization.Converters.ObjectConverter.Deserialize(PropertiesDotNet.Serialization.PropertiesSerializer,System.Type,PropertiesDotNet.Serialization.PropertiesTree.PropertiesObject)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Serialization.Converters.ObjectConverter.Serialize(PropertiesDotNet.Serialization.PropertiesSerializer,System.Type,System.Object,PropertiesDotNet.Serialization.PropertiesTree.PropertiesObject)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Serialization.Converters.ObjectConverter.ClearCache(System.Type)">
            <summary>
            Clears the cached members for the specified <paramref name="type"/>.
            </summary>
            <param name="type">The type members to clear.</param>
        </member>
        <member name="M:PropertiesDotNet.Serialization.Converters.ObjectConverter.ClearCache">
            <summary>
            Clears all the  cached members.
            </summary>
        </member>
        <member name="T:PropertiesDotNet.Serialization.Converters.SystemTypeConverter">
            <summary>
            A primitive converter for system types.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Serialization.Converters.SystemTypeConverter.#ctor">
            <summary>
            Creates a new <see cref="T:PropertiesDotNet.Serialization.Converters.SystemTypeConverter"/>.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Serialization.Converters.SystemTypeConverter.Accepts(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Serialization.Converters.SystemTypeConverter.Deserialize(PropertiesDotNet.Serialization.PropertiesSerializer,System.Type,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Serialization.Converters.SystemTypeConverter.Serialize(PropertiesDotNet.Serialization.PropertiesSerializer,System.Type,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:PropertiesDotNet.Serialization.Converters.TimeSpanConverter">
            <summary>
            A converter for <see cref="T:System.TimeSpan"/>.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Serialization.Converters.TimeSpanConverter.#ctor">
            <summary>
            Creates a new <see cref="T:PropertiesDotNet.Serialization.Converters.TimeSpanConverter"/>.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Serialization.Converters.TimeSpanConverter.Accepts(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:PropertiesDotNet.Serialization.Converters.TimeSpanConverter.Deserialize(PropertiesDotNet.Serialization.PropertiesSerializer,System.Type,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Serialization.Converters.TimeSpanConverter.Serialize(PropertiesDotNet.Serialization.PropertiesSerializer,System.Type,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:PropertiesDotNet.Serialization.IPropertiesConverter">
            <summary>
            Represents a (de)serializer for non-primitive ".properties" types. These converters serialize objects as a
            delimeter-separated tree and only emit primitive values as actual properties.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Serialization.IPropertiesConverter.Accepts(System.Type)">
            <summary>
            Returns whether this converter can convert the specified <paramref name="type"/>.
            </summary>
            <param name="type">The type to check.</param>
            <returns>true if the specified <paramref name="type"/> can be converted by the converter; false otherwise.</returns>
        </member>
        <member name="M:PropertiesDotNet.Serialization.IPropertiesConverter.Deserialize(PropertiesDotNet.Serialization.PropertiesSerializer,System.Type,PropertiesDotNet.Serialization.PropertiesTree.PropertiesObject)">
            <summary>
            Deserializes the property <paramref name="obj"/> as the <paramref name="type"/>. 
            </summary>
            <param name="serializer">The serializer which is requesting deserialization.</param>
            <param name="type">The type to deserialize.</param>
            <param name="obj">A tree-like representation of the ".properties" object to deserialize.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:PropertiesDotNet.Serialization.IPropertiesConverter.Serialize(PropertiesDotNet.Serialization.PropertiesSerializer,System.Type,System.Object,PropertiesDotNet.Serialization.PropertiesTree.PropertiesObject)">
            <summary>
            Serializes the object <paramref name="value"/> as the <paramref name="type"/> into
            the <paramref name="obj"/>. 
            </summary>
            <param name="serializer">The serializer which is requesting serialization.</param>
            <param name="type">The type to intepret the <paramref name="value"/> as.</param>
            <param name="obj">A tree-like representation of the <paramref name="value"/>.</param>
            <param name="value">The value to serialize.</param>
        </member>
        <member name="T:PropertiesDotNet.Serialization.IPropertiesPrimitiveConverter">
            <summary>
            Represents a (de)serializer for primitive ".properties" types. These converters register specific types as
            primitive types.
            </summary>
            <remarks>
            A primitive value is a textual value that can be written
            as either a key or a value and does not need to be (de)composed into a tree of properties.
            </remarks>
        </member>
        <member name="M:PropertiesDotNet.Serialization.IPropertiesPrimitiveConverter.Accepts(System.Type)">
            <summary>
            Returns whether this converter can convert the specified <paramref name="type"/>.
            </summary>
            <param name="type">The type to check.</param>
            <returns>true if the specified <paramref name="type"/> can be converted by the converter; false otherwise.</returns>
        </member>
        <member name="M:PropertiesDotNet.Serialization.IPropertiesPrimitiveConverter.Deserialize(PropertiesDotNet.Serialization.PropertiesSerializer,System.Type,System.String)">
            <summary>
            Deserializes the given primitive <paramref name="input"/> as the <paramref name="type"/>. 
            </summary>
            <param name="serializer">The serializer which is requesting deserialization.</param>
            <param name="type">The type to intepret the <paramref name="input"/> as.</param>
            <param name="input">The textual value to deserialize. This represents the key or value from the primitive property.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:PropertiesDotNet.Serialization.IPropertiesPrimitiveConverter.Serialize(PropertiesDotNet.Serialization.PropertiesSerializer,System.Type,System.Object)">
            <summary>
            Serializes the given primitive <paramref name="input"/> as the <paramref name="type"/>.
            </summary>
            <param name="serializer">The serializer which is requesting serialization.</param>
            <param name="type">The type to intepret the <paramref name="input"/> as.</param>
            <param name="input">The input object to serialize.</param>
            <returns>The <paramref name="input"/> as a text value. This translates to the key or value for the primitive property.</returns>
        </member>
        <member name="T:PropertiesDotNet.Serialization.ObjectProviders.DynamicObjectProvider">
            <summary>
            Represents an <see cref="T:PropertiesDotNet.Serialization.ObjectProviders.IObjectProvider"/> that creates objects using IL instructions.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Serialization.ObjectProviders.DynamicObjectProvider.ConstructorFlags">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Serialization.ObjectProviders.DynamicObjectProvider.#ctor">
            <summary>
            Creates a new <see cref="T:PropertiesDotNet.Serialization.ObjectProviders.DynamicObjectProvider"/>.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Serialization.ObjectProviders.DynamicObjectProvider.Construct(System.Type,System.Type[],System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Serialization.ObjectProviders.DynamicObjectProvider.ClearCache(System.Type)">
            <summary>
            Clears the cached constructors for the specified <paramref name="type"/>.
            </summary>
            <param name="type">The type of which the constructors should be cleared.</param>
        </member>
        <member name="M:PropertiesDotNet.Serialization.ObjectProviders.DynamicObjectProvider.ClearCache(System.Type,System.Type[])">
            <summary>
            Clears the cached constructor for the specified <paramref name="type"/>.
            </summary>
            <param name="type">The type of which the constructors should be cleared.</param>
            <param name="argTypes">The arguments of the constructor to clear.</param>
        </member>
        <member name="M:PropertiesDotNet.Serialization.ObjectProviders.DynamicObjectProvider.ClearCache">
            <summary>
            Clears the cached constructors.
            </summary>
        </member>
        <member name="T:PropertiesDotNet.Serialization.ObjectProviders.ExpressionObjectProvider">
            <summary>
            Represents an <see cref="T:PropertiesDotNet.Serialization.ObjectProviders.IObjectProvider"/> that creates objects using expressions.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Serialization.ObjectProviders.ExpressionObjectProvider.ConstructorFlags">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Serialization.ObjectProviders.ExpressionObjectProvider.#ctor">
            <summary>
            Creates a new <see cref="T:PropertiesDotNet.Serialization.ObjectProviders.ExpressionObjectProvider"/>.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Serialization.ObjectProviders.ExpressionObjectProvider.Construct(System.Type,System.Type[],System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Serialization.ObjectProviders.ExpressionObjectProvider.ClearCache(System.Type)">
            <summary>
            Clears the cached constructors for the specified <paramref name="type"/>.
            </summary>
            <param name="type">The type constructor to clear.</param>
        </member>
        <member name="M:PropertiesDotNet.Serialization.ObjectProviders.ExpressionObjectProvider.ClearCache">
            <summary>
            Clears all the cached constructors.
            </summary>
        </member>
        <member name="T:PropertiesDotNet.Serialization.ObjectProviders.ObjectConstructor">
            <summary>
            Represents an object constructor.
            </summary>
            <param name="args">The constructor arguments.</param>
            <returns>The constructed object.</returns>
        </member>
        <member name="T:PropertiesDotNet.Serialization.ObjectProviders.IObjectProvider">
            <summary>
            Represents a factory or provider where specific object types can be created.
            </summary>
            <remarks>Object providers are only responsible for the creation of non-serializable types.</remarks>
        </member>
        <member name="P:PropertiesDotNet.Serialization.ObjectProviders.IObjectProvider.ConstructorFlags">
            <summary>
            The binding flags for constructors.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Serialization.ObjectProviders.IObjectProvider.Construct(System.Type,System.Type[],System.Object[])">
            <summary>
            Creates a new instance of the specified <paramref name="type"/>.
            </summary>
            <param name="type">The type to construct.</param>
            <param name="argTypes">The argument types.</param>
            <param name="args">The constructor arguments.</param>
            <returns>A new instance of the specified <paramref name="type"/>. This instance is empty.</returns>
        </member>
        <member name="T:PropertiesDotNet.Serialization.ObjectProviders.ObjectProviderExtensions">
            <summary>
            Provides extension methods for an <see cref="T:PropertiesDotNet.Serialization.ObjectProviders.IObjectProvider"/>.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Serialization.ObjectProviders.ObjectProviderExtensions.Construct(PropertiesDotNet.Serialization.ObjectProviders.IObjectProvider,System.Type,System.Object[])">
            <summary>
            Creates a new instance of the specified <paramref name="type"/>.
            </summary>
            <param name="provider">The object provider.</param>
            <param name="type">The type to construct.</param>
            <param name="args">The constructor arguments.</param>
            <returns>A new instance of the specified <paramref name="type"/>. This instance is empty.</returns>
        </member>
        <member name="M:PropertiesDotNet.Serialization.ObjectProviders.ObjectProviderExtensions.Construct(PropertiesDotNet.Serialization.ObjectProviders.IObjectProvider,System.Type)">
            <summary>
            Creates a new instance of the specified <paramref name="type"/> using the default constructor.
            </summary>
            <param name="provider">The object provider.</param>
            <param name="type">The type to construct.</param>
            <returns>A new instance of the specified <paramref name="type"/>. This instance is empty.</returns>
        </member>
        <member name="M:PropertiesDotNet.Serialization.ObjectProviders.ObjectProviderExtensions.Construct``1(PropertiesDotNet.Serialization.ObjectProviders.IObjectProvider,System.Type[],System.Object[])">
            <summary>
            Creates a new instance of the specified <typeparamref name="T"/>.
            </summary>
            <param name="provider">The object provider.</param>
            <param name="argTypes">The argument types.</param>
            <param name="args">The constructor arguments.</param>
            <typeparam name="T">The type to construct.</typeparam>
            <returns>A new instance of the specified <typeparamref name="T"/>. This instance is empty.</returns>
        </member>
        <member name="M:PropertiesDotNet.Serialization.ObjectProviders.ObjectProviderExtensions.Construct``1(PropertiesDotNet.Serialization.ObjectProviders.IObjectProvider,System.Object[])">
            <summary>
            Creates a new instance of the specified <typeparamref name="T"/>.
            </summary>
            <param name="provider">The object provider.</param>
            <param name="args">The constructor arguments.</param>
            <typeparam name="T">The type to construct.</typeparam>
            <returns>A new instance of the specified <typeparamref name="T"/>. This instance is empty.</returns>
        </member>
        <member name="M:PropertiesDotNet.Serialization.ObjectProviders.ObjectProviderExtensions.Construct``1(PropertiesDotNet.Serialization.ObjectProviders.IObjectProvider)">
            <summary>
            Creates a new instance of the specified <typeparamref name="T"/> using the default constructor.
            </summary>
            <param name="provider">The object provider.</param>
            <typeparam name="T">The type to construct.</typeparam>
            <returns>A new instance of the specified <typeparamref name="T"/>. This instance is empty.</returns>
        </member>
        <member name="T:PropertiesDotNet.Serialization.ObjectProviders.TypeCacheEqualityComparer">
            <summary>
            Comparer for registered types and constructors in <see cref="T:PropertiesDotNet.Serialization.ObjectProviders.IObjectProvider"/>s.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Serialization.ObjectProviders.TypeCacheEqualityComparer.Equals(System.Type,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Serialization.ObjectProviders.TypeCacheEqualityComparer.Equals(System.Type[],System.Type[])">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Serialization.ObjectProviders.TypeCacheEqualityComparer.GetHashCode(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Serialization.ObjectProviders.TypeCacheEqualityComparer.GetHashCode(System.Type[])">
            <inheritdoc/>
        </member>
        <member name="T:PropertiesDotNet.Serialization.ObjectProviders.ReflectionObjectProvider">
            <summary>
            Represents an <see cref="T:PropertiesDotNet.Serialization.ObjectProviders.IObjectProvider"/> that creates objects using reflection.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Serialization.ObjectProviders.ReflectionObjectProvider.ConstructorFlags">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Serialization.ObjectProviders.ReflectionObjectProvider.#ctor">
            <summary>
            Creates a new <see cref="T:PropertiesDotNet.Serialization.ObjectProviders.ReflectionObjectProvider"/>.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Serialization.ObjectProviders.ReflectionObjectProvider.Construct(System.Type,System.Type[],System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Serialization.ObjectProviders.ReflectionObjectProvider.ClearCache(System.Type)">
            <summary>
            Clears the cached constructors for the specified <paramref name="type"/>.
            </summary>
            <param name="type">The type constructor to clear.</param>
        </member>
        <member name="M:PropertiesDotNet.Serialization.ObjectProviders.ReflectionObjectProvider.ClearCache">
            <summary>
            Clears all the cached constructors.
            </summary>
        </member>
        <member name="T:PropertiesDotNet.Serialization.PropertiesMemberAttribute">
            <summary>
            Provides custom ".properties" object serialization instructions for the <see cref="T:PropertiesDotNet.Serialization.Converters.ObjectConverter"/>.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Serialization.PropertiesMemberAttribute.SerializeAs">
            <summary>
            Specifies that this property should be serialized as the given type, rather than using the actual runtime value's type.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Serialization.PropertiesMemberAttribute.Name">
            <summary>
            Instructs the <see cref="T:PropertiesDotNet.Serialization.PropertiesSerializer"/> to use a different member name for (de)serialization.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Serialization.PropertiesMemberAttribute.Serialize">
            <summary>
            Whether this memeber should be serialized.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesMemberAttribute.#ctor(System.Boolean)">
            <summary>
            Provides custom ".properties" object serialization instructions for the <see cref="T:PropertiesDotNet.Serialization.Converters.ObjectConverter"/>.
            </summary>
            <param name="serialize">Whether this property should be (de)serialized.</param>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesMemberAttribute.#ctor(System.String)">
            <summary>
            Provides custom ".properties" object serialization instructions for the <see cref="T:PropertiesDotNet.Serialization.Converters.ObjectConverter"/>.
            </summary>
            <param name="name">The name that should be used for the serialization and deserialization of this member.</param>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesMemberAttribute.#ctor(System.Type)">
            <summary>
            Provides custom ".properties" object serialization instructions for the <see cref="T:PropertiesDotNet.Serialization.Converters.ObjectConverter"/>.
            </summary>
            <param name="serializeAs">Specifies that this property should be serialized as the given type, rather than using the actual runtime value's type.</param>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesMemberAttribute.#ctor(System.Type,System.String)">
            <summary>
            Provides custom ".properties" object serialization instructions for the <see cref="T:PropertiesDotNet.Serialization.Converters.ObjectConverter"/>.
            </summary>
            <param name="serializeAs">Specifies that this property should be serialized as the given type, rather than using the actual runtime value's type.</param>
            <param name="name">The name that should be used for the serialization and deserialization of this member.</param>
        </member>
        <member name="T:PropertiesDotNet.Serialization.PropertiesCommentAttribute">
            <summary>
            Instructs the <see cref="T:PropertiesDotNet.Serialization.Converters.ObjectConverter"/> that this comment should be written above this member.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Serialization.PropertiesCommentAttribute.Comment">
            <summary>
            The content of this comment.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesCommentAttribute.#ctor(System.String)">
            <summary>
            Instructs the <see cref="T:PropertiesDotNet.Serialization.Converters.ObjectConverter"/> that this comment should be written above this member.
            </summary>
            <param name="comment">The content of this comment.</param>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesCommentAttribute.ToString">
            <summary>
            Returns the text content of this comment with the handle.
            </summary>
            <returns>The text content of this comment with the handle.</returns>
        </member>
        <member name="T:PropertiesDotNet.Serialization.TypeSerialized">
            <summary>
            Delegate called when a type is (de)serialized.
            </summary>
            <param name="serializer">The serializer that (de)serialized the type.</param>
            <param name="type">The type that the object was (de)serialized as.</param>
            <param name="value">The actual value of the (de)serialized object.</param>
        </member>
        <member name="T:PropertiesDotNet.Serialization.PropertiesSerializer">
            <summary>
            Represents a serializer and deserializer that transforms .NET objects into ".properties" objects and documents
            and vice-versa.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Serialization.PropertiesSerializer.Settings">
            <summary>
            The settings for this <see cref="T:PropertiesDotNet.Serialization.PropertiesSerializer"/>.
            </summary>
        </member>
        <member name="E:PropertiesDotNet.Serialization.PropertiesSerializer.TypeSerialized">
            <summary>
            Event raised when a type serialized inside a document.
            </summary>
        </member>
        <member name="E:PropertiesDotNet.Serialization.PropertiesSerializer.TypeDeserialized">
            <summary>
            Event raised when a type is deserialized from a document.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Serialization.PropertiesSerializer.ObjectProvider">
            <summary>
            A shorthand to the <see cref="P:PropertiesDotNet.Serialization.PropertiesSerializerSettings.ObjectProvider"/> for this serializer.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Serialization.PropertiesSerializer.ValueProvider">
            <summary>
            A shorthand to the <see cref="P:PropertiesDotNet.Serialization.PropertiesSerializerSettings.ValueProvider"/> for this serializer.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Serialization.PropertiesSerializer.TreeComposer">
            <summary>
            A shorthand to the <see cref="P:PropertiesDotNet.Serialization.PropertiesSerializerSettings.TreeComposer"/> for this serializer.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Serialization.PropertiesSerializer.Converters">
            <summary>
            A shorthand to the <see cref="P:PropertiesDotNet.Serialization.PropertiesSerializerSettings.Converters"/> for this serializer.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Serialization.PropertiesSerializer.PrimitiveConverters">
            <summary>
            A short-hand to the <see cref="P:PropertiesDotNet.Serialization.PropertiesSerializerSettings.PrimitiveConverters"/> for this serializer.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Serialization.PropertiesSerializer.DefaultObjectType">
            <summary>
            A shorthand to the <see cref="P:PropertiesDotNet.Serialization.PropertiesSerializerSettings.DefaultObjectType"/> for this serializer.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Serialization.PropertiesSerializer.DefaultPrimitiveType">
            <summary>
            A shorthand to the <see cref="P:PropertiesDotNet.Serialization.PropertiesSerializerSettings.DefaultPrimitiveType"/> for this serializer.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesSerializer.#ctor">
            <summary>
            Creates a new serializer with the default settings
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesSerializer.#ctor(PropertiesDotNet.Serialization.PropertiesSerializerSettings)">
            <summary>
            Creates a new serializer with the given <paramref name="settings"/>, or the default settings if left null.
            </summary>
            <param name="settings">The settings for this serializer, or the default settings if left null.</param>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesSerializer.Deserialize``1(PropertiesDotNet.Core.IPropertiesReader)">
            <summary>
            Deserializes the ".properties" object tree as the given .NET <typeparamref name="T"/>.
            </summary>
            <param name="input">The input document to deserialize.</param>
            <typeparam name="T">The type to deserialize the tree as.</typeparam>
            <returns>The deserialized value.</returns>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If a deserialization exception occurs or if no 
            <see cref="T:PropertiesDotNet.Serialization.IPropertiesConverter"/> could deserialize the tree as <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesSerializer.Deserialize``1(System.IO.TextReader)">
            <summary>
            Deserializes the ".properties" object tree as the given .NET <typeparamref name="T"/>.
            </summary>
            <param name="input">The input document to deserialize.</param>
            <typeparam name="T">The type to deserialize the tree as.</typeparam>
            <returns>The deserialized value.</returns>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If a deserialization exception occurs or if no 
            <see cref="T:PropertiesDotNet.Serialization.IPropertiesConverter"/> could deserialize the tree as <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesSerializer.Deserialize``1(System.IO.Stream)">
            <summary>
            Deserializes the ".properties" object tree as the given .NET <typeparamref name="T"/>.
            </summary>
            <param name="input">The input document to deserialize.</param>
            <typeparam name="T">The type to deserialize the tree as.</typeparam>
            <returns>The deserialized value.</returns>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If a deserialization exception occurs or if no 
            <see cref="T:PropertiesDotNet.Serialization.IPropertiesConverter"/> could deserialize the tree as <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesSerializer.Deserialize``1(System.String)">
            <summary>
            Deserializes the ".properties" object tree as the given .NET <typeparamref name="T"/>.
            </summary>
            <param name="document">The input document to deserialize as a string.</param>
            <typeparam name="T">The type to deserialize the tree as.</typeparam>
            <returns>The deserialized value.</returns>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If a deserialization exception occurs or if no 
            <see cref="T:PropertiesDotNet.Serialization.IPropertiesConverter"/> could deserialize the tree as <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesSerializer.Deserialize(System.Type,PropertiesDotNet.Core.IPropertiesReader)">
            <summary>
            Deserializes the ".properties" object tree as the given .NET <paramref name="type"/>.
            </summary>
            <param name="type">The type to deserialize the tree as.</param>
            <param name="input">The input document to deserialize.</param>
            <returns>The deserialized value.</returns>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If a deserialization exception occurs or if no 
            <see cref="T:PropertiesDotNet.Serialization.IPropertiesConverter"/> could deserialize the tree as the <paramref name="type"/>.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesSerializer.Deserialize(System.Type,System.IO.TextReader)">
            <summary>
            Deserializes the ".properties" object tree as the given .NET <paramref name="type"/>.
            </summary>
            <param name="type">The type to deserialize the tree as.</param>
            <param name="input">The input document to deserialize.</param>
            <returns>The deserialized value.</returns>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If a deserialization exception occurs or if no 
            <see cref="T:PropertiesDotNet.Serialization.IPropertiesConverter"/> could deserialize the tree as the <paramref name="type"/>.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesSerializer.Deserialize(System.Type,System.String)">
            <summary>
            Deserializes the ".properties" object tree as the given .NET <paramref name="type"/>.
            </summary>
            <param name="type">The type to deserialize the tree as.</param>
            <param name="document">The input document to deserialize as a string.</param>
            <returns>The deserialized value.</returns>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If a deserialization exception occurs or if no 
            <see cref="T:PropertiesDotNet.Serialization.IPropertiesConverter"/> could deserialize the tree as the <paramref name="type"/>.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesSerializer.Deserialize(System.Type,System.IO.Stream)">
            <summary>
            Deserializes the ".properties" object tree as the given .NET <paramref name="type"/>.
            </summary>
            <param name="type">The type to deserialize the tree as.</param>
            <param name="input">The input document to deserialize.</param>
            <returns>The deserialized value.</returns>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If a deserialization exception occurs or if no 
            <see cref="T:PropertiesDotNet.Serialization.IPropertiesConverter"/> could deserialize the tree as the <paramref name="type"/>.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesSerializer.Serialize(System.Object)">
            <summary>
            Serializes the .NET object <paramref name="value"/>  into a ".properties" object tree.
            </summary>
            <param name="value">The value to serialize.</param>
            <returns>The document as a string.</returns>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If a serialization exception occurs or if no 
            <see cref="T:PropertiesDotNet.Serialization.IPropertiesConverter"/> could serialize the <paramref name="value"/>.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesSerializer.Serialize(System.Type,System.Object)">
            <summary>
            Serializes the .NET object <paramref name="value"/> as the given <paramref name="type"/> into a ".properties" object tree.
            </summary>
            <param name="type">The type to serialize the <paramref name="value"/> as.</param>
            <param name="value">The value to serialize.</param>
            <returns>The document as a string.</returns>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If a serialization exception occurs or if no 
            <see cref="T:PropertiesDotNet.Serialization.IPropertiesConverter"/> could serialize the <paramref name="value"/> as the <paramref name="type"/>.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesSerializer.Serialize(System.Object,PropertiesDotNet.Core.IPropertiesWriter)">
            <summary>
            Serializes the .NET object <paramref name="value"/> into a ".properties" object tree.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="output">The writer to serialize into.</param>
            <returns>The root of the object tree.</returns>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If a serialization exception occurs or if no 
            <see cref="T:PropertiesDotNet.Serialization.IPropertiesConverter"/> could serialize the <paramref name="value"/>.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesSerializer.Serialize(System.Object,System.IO.TextWriter)">
            <summary>
            Serializes the .NET object <paramref name="value"/> into a ".properties" object tree.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="output">The writer to serialize into.</param>
            <returns>The root of the object tree.</returns>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If a serialization exception occurs or if no 
            <see cref="T:PropertiesDotNet.Serialization.IPropertiesConverter"/> could serialize the <paramref name="value"/>.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesSerializer.Serialize(System.Object,System.IO.Stream)">
            <summary>
            Serializes the .NET object <paramref name="value"/> into a ".properties" object tree.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="output">The writer to serialize into.</param>
            <returns>The root of the object tree.</returns>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If a serialization exception occurs or if no 
            <see cref="T:PropertiesDotNet.Serialization.IPropertiesConverter"/> could serialize the <paramref name="value"/>.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesSerializer.Serialize(System.Object,System.String)">
            <summary>
            Serializes the .NET object <paramref name="value"/> into a ".properties" object tree.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="path">The path of the file to serialize into.</param>
            <returns>The root of the object tree.</returns>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If a serialization exception occurs or if no 
            <see cref="T:PropertiesDotNet.Serialization.IPropertiesConverter"/> could serialize the <paramref name="value"/>.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesSerializer.Serialize(System.Type,System.Object,PropertiesDotNet.Core.IPropertiesWriter)">
            <summary>
            Serializes the .NET object <paramref name="value"/> as the given <paramref name="type"/> into a ".properties" object tree.
            </summary>
            <param name="type">The type to serialize the <paramref name="value"/> as.</param>
            <param name="value">The value to serialize.</param>
            <param name="output">The writer to serialize into.</param>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If a serialization exception occurs or if no 
            <see cref="T:PropertiesDotNet.Serialization.IPropertiesConverter"/> could serialize the <paramref name="value"/> as the <paramref name="type"/>.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesSerializer.Serialize(System.Type,System.Object,System.IO.TextWriter)">
            <summary>
            Serializes the .NET object <paramref name="value"/> as the given <paramref name="type"/> into a ".properties" object tree.
            </summary>
            <param name="type">The type to serialize the <paramref name="value"/> as.</param>
            <param name="value">The value to serialize.</param>
            <param name="output">The writer to serialize into.</param>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If a serialization exception occurs or if no 
            <see cref="T:PropertiesDotNet.Serialization.IPropertiesConverter"/> could serialize the <paramref name="value"/> as the <paramref name="type"/>.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesSerializer.Serialize(System.Type,System.Object,System.IO.Stream)">
            <summary>
            Serializes the .NET object <paramref name="value"/> as the given <paramref name="type"/> into a ".properties" object tree.
            </summary>
            <param name="type">The type to serialize the <paramref name="value"/> as.</param>
            <param name="value">The value to serialize.</param>
            <param name="output">The writer to serialize into.</param>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If a serialization exception occurs or if no 
            <see cref="T:PropertiesDotNet.Serialization.IPropertiesConverter"/> could serialize the <paramref name="value"/> as the <paramref name="type"/>.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesSerializer.Serialize(System.Type,System.Object,System.String)">
            <summary>
            Serializes the .NET object <paramref name="value"/> as the given <paramref name="type"/> into a ".properties" object tree.
            </summary>
            <param name="type">The type to serialize the <paramref name="value"/> as.</param>
            <param name="value">The value to serialize.</param>
            <param name="path">The path of the file to serialize into.</param>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If a serialization exception occurs or if no 
            <see cref="T:PropertiesDotNet.Serialization.IPropertiesConverter"/> could serialize the <paramref name="value"/> as the <paramref name="type"/>.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesSerializer.DeserializeObject``1(PropertiesDotNet.Core.IPropertiesReader)">
            <summary>
            Deserializes the ".properties" object tree as the given .NET <typeparamref name="T"/>.
            </summary>
            <param name="input">The input document to deserialize.</param>
            <typeparam name="T">The type to deserialize the tree as.</typeparam>
            <returns>The deserialized value.</returns>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If a deserialization exception occurs or if no 
            <see cref="T:PropertiesDotNet.Serialization.IPropertiesConverter"/> could deserialize the tree as <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesSerializer.DeserializeObject``1(System.IO.TextReader)">
            <summary>
            Deserializes the ".properties" object tree as the given .NET <typeparamref name="T"/>.
            </summary>
            <param name="input">The input document to deserialize.</param>
            <typeparam name="T">The type to deserialize the tree as.</typeparam>
            <returns>The deserialized value.</returns>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If a deserialization exception occurs or if no 
            <see cref="T:PropertiesDotNet.Serialization.IPropertiesConverter"/> could deserialize the tree as <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesSerializer.DeserializeObject``1(System.String)">
            <summary>
            Deserializes the ".properties" object tree as the given .NET <typeparamref name="T"/>.
            </summary>
            <param name="document">The input document to deserialize as a string.</param>
            <typeparam name="T">The type to deserialize the tree as.</typeparam>
            <returns>The deserialized value.</returns>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If a deserialization exception occurs or if no 
            <see cref="T:PropertiesDotNet.Serialization.IPropertiesConverter"/> could deserialize the tree as <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesSerializer.DeserializeObject``1(System.IO.Stream)">
            <summary>
            Deserializes the ".properties" object tree as the given .NET <typeparamref name="T"/>.
            </summary>
            <param name="input">The input document to deserialize.</param>
            <typeparam name="T">The type to deserialize the tree as.</typeparam>
            <returns>The deserialized value.</returns>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If a deserialization exception occurs or if no 
            <see cref="T:PropertiesDotNet.Serialization.IPropertiesConverter"/> could deserialize the tree as <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesSerializer.DeserializeObject(System.Type,PropertiesDotNet.Core.IPropertiesReader)">
            <summary>
            Deserializes the ".properties" object tree as the given .NET <paramref name="type"/>.
            </summary>
            <param name="type">The type to deserialize the tree as.</param>
            <param name="input">The input document to deserialize.</param>
            <returns>The deserialized value.</returns>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If a deserialization exception occurs or if no 
            <see cref="T:PropertiesDotNet.Serialization.IPropertiesConverter"/> could deserialize the tree as the <paramref name="type"/>.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesSerializer.DeserializeObject(System.Type,System.IO.TextReader)">
            <summary>
            Deserializes the ".properties" object tree as the given .NET <paramref name="type"/>.
            </summary>
            <param name="type">The type to deserialize the tree as.</param>
            <param name="input">The input document to deserialize.</param>
            <returns>The deserialized value.</returns>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If a deserialization exception occurs or if no 
            <see cref="T:PropertiesDotNet.Serialization.IPropertiesConverter"/> could deserialize the tree as the <paramref name="type"/>.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesSerializer.DeserializeObject(System.Type,System.String)">
            <summary>
            Deserializes the ".properties" object tree as the given .NET <paramref name="type"/>.
            </summary>
            <param name="type">The type to deserialize the tree as.</param>
            <param name="document">The input document to deserialize as a string.</param>
            <returns>The deserialized value.</returns>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If a deserialization exception occurs or if no 
            <see cref="T:PropertiesDotNet.Serialization.IPropertiesConverter"/> could deserialize the tree as the <paramref name="type"/>.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesSerializer.DeserializeObject(System.Type,System.IO.Stream)">
            <summary>
            Deserializes the ".properties" object tree as the given .NET <paramref name="type"/>.
            </summary>
            <param name="type">The type to deserialize the tree as.</param>
            <param name="input">The input document to deserialize.</param>
            <returns>The deserialized value.</returns>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If a deserialization exception occurs or if no 
            <see cref="T:PropertiesDotNet.Serialization.IPropertiesConverter"/> could deserialize the tree as the <paramref name="type"/>.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesSerializer.DeserializeObject(System.Type,PropertiesDotNet.Serialization.PropertiesTree.PropertiesObject)">
            <summary>
            Deserializes the ".properties" object tree as the given .NET <paramref name="type"/>.
            </summary>
            <param name="type">The type to deserialize the tree as.</param>
            <param name="root">The root of the object tree.</param>
            <returns>The deserialized value.</returns>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If a deserialization exception occurs or if no 
            <see cref="T:PropertiesDotNet.Serialization.IPropertiesConverter"/> could deserialize the tree as the <paramref name="type"/>.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesSerializer.SerializeObject(System.Object,PropertiesDotNet.Core.IPropertiesWriter)">
            <summary>
            Serializes the .NET object <paramref name="value"/> into a ".properties" object tree.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="output">The writer to serialize into.</param>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If a serialization exception occurs or if no 
            <see cref="T:PropertiesDotNet.Serialization.IPropertiesConverter"/> could serialize the <paramref name="value"/>.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesSerializer.SerializeObject(System.Object,System.IO.TextWriter)">
            <summary>
            Serializes the .NET object <paramref name="value"/> into a ".properties" object tree.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="output">The writer to serialize into.</param>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If a serialization exception occurs or if no 
            <see cref="T:PropertiesDotNet.Serialization.IPropertiesConverter"/> could serialize the <paramref name="value"/>.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesSerializer.SerializeObject(System.Object,System.IO.Stream)">
            <summary>
            Serializes the .NET object <paramref name="value"/> into a ".properties" object tree.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="output">The writer to serialize into.</param>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If a serialization exception occurs or if no 
            <see cref="T:PropertiesDotNet.Serialization.IPropertiesConverter"/> could serialize the <paramref name="value"/>.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesSerializer.SerializeObject(System.Object,System.String)">
            <summary>
            Serializes the .NET object <paramref name="value"/> into a ".properties" object tree.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="path">The path of the file to serialize into.</param>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If a serialization exception occurs or if no 
            <see cref="T:PropertiesDotNet.Serialization.IPropertiesConverter"/> could serialize the <paramref name="value"/>.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesSerializer.SerializeObject(System.Type,System.Object,PropertiesDotNet.Core.IPropertiesWriter)">
            <summary>
            Serializes the .NET object <paramref name="value"/> as the given <paramref name="type"/> into a ".properties" object tree.
            </summary>
            <param name="type">The type to serialize the <paramref name="value"/> as.</param>
            <param name="value">The value to serialize.</param>
            <param name="output">The writer to serialize into.</param>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If a serialization exception occurs or if no 
            <see cref="T:PropertiesDotNet.Serialization.IPropertiesConverter"/> could serialize the <paramref name="value"/> as the <paramref name="type"/>.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesSerializer.SerializeObject(System.Type,System.Object,System.IO.TextWriter)">
            <summary>
            Serializes the .NET object <paramref name="value"/> as the given <paramref name="type"/> into a ".properties" object tree.
            </summary>
            <param name="type">The type to serialize the <paramref name="value"/> as.</param>
            <param name="value">The value to serialize.</param>
            <param name="output">The writer to serialize into.</param>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If a serialization exception occurs or if no 
            <see cref="T:PropertiesDotNet.Serialization.IPropertiesConverter"/> could serialize the <paramref name="value"/> as the <paramref name="type"/>.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesSerializer.SerializeObject(System.Type,System.Object,System.IO.Stream)">
            <summary>
            Serializes the .NET object <paramref name="value"/> as the given <paramref name="type"/> into a ".properties" object tree.
            </summary>
            <param name="type">The type to serialize the <paramref name="value"/> as.</param>
            <param name="value">The value to serialize.</param>
            <param name="output">The writer to serialize into.</param>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If a serialization exception occurs or if no 
            <see cref="T:PropertiesDotNet.Serialization.IPropertiesConverter"/> could serialize the <paramref name="value"/> as the <paramref name="type"/>.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesSerializer.SerializeObject(System.Type,System.Object,System.String)">
            <summary>
            Serializes the .NET object <paramref name="value"/> as the given <paramref name="type"/> into a ".properties" object tree.
            </summary>
            <param name="type">The type to serialize the <paramref name="value"/> as.</param>
            <param name="value">The value to serialize.</param>
            <param name="path">The path of the file to serialize into.</param>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If a serialization exception occurs or if no 
            <see cref="T:PropertiesDotNet.Serialization.IPropertiesConverter"/> could serialize the <paramref name="value"/> as the <paramref name="type"/>.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesSerializer.SerializeObject(System.Object)">
            <summary>
            Serializes the .NET object <paramref name="value"/> into a ".properties" object tree.
            </summary>
            <param name="value">The value to serialize.</param>
            <returns>The document as a string.</returns>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If a serialization exception occurs or if no 
            <see cref="T:PropertiesDotNet.Serialization.IPropertiesConverter"/> could serialize the <paramref name="value"/>.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesSerializer.SerializeObject(System.Type,System.Object)">
            <summary>
            Serializes the .NET object <paramref name="value"/> as the given <paramref name="type"/> into a ".properties" object tree.
            </summary>
            <param name="type">The type to serialize the <paramref name="value"/> as.</param>
            <param name="value">The value to serialize.</param>
            <returns>The document as a string.</returns>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If a serialization exception occurs or if no 
            <see cref="T:PropertiesDotNet.Serialization.IPropertiesConverter"/> could serialize the <paramref name="value"/> as the <paramref name="type"/>.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesSerializer.SerializeObject(System.Object,PropertiesDotNet.Serialization.PropertiesTree.PropertiesObject)">
            <summary>
            Serializes the .NET object <paramref name="value"/> into a ".properties" object tree.
            </summary>
            <param name="value">The value to serialize.</param>
            <param name="root">The root object to serialize into.</param>
            <returns>The root of the object tree.</returns>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If a serialization exception occurs or if no 
            <see cref="T:PropertiesDotNet.Serialization.IPropertiesConverter"/> could serialize the <paramref name="value"/>.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesSerializer.SerializeObject(System.Type,System.Object,PropertiesDotNet.Serialization.PropertiesTree.PropertiesObject)">
            <summary>
            Serializes the .NET object <paramref name="value"/> as the given <paramref name="type"/> into a ".properties" object tree.
            </summary>
            <param name="type">The type to serialize the <paramref name="value"/> as.</param>
            <param name="value">The value to serialize.</param>
            <param name="root">The root object to serialize into.</param>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If a serialization exception occurs or if no 
            <see cref="T:PropertiesDotNet.Serialization.IPropertiesConverter"/> could serialize the <paramref name="value"/> as the <paramref name="type"/>.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesSerializer.IsPrimitive(System.Type)">
            <summary>
            Returns whether an <see cref="T:PropertiesDotNet.Serialization.IPropertiesPrimitiveConverter"/> is registered for the given type.
            </summary>
            <param name="type">The type to check.</param>
            <returns>true if an <see cref="T:PropertiesDotNet.Serialization.IPropertiesPrimitiveConverter"/> is registered for the given type; false otherwise.</returns>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesSerializer.DeserializePrimitive``1(System.String)">
            <summary>
            Deserializes the primitive <paramref name="value"/> as a(n) <typeparamref name="T"/>.
            </summary>
            <param name="value">The primitive value to deserialize.</param>
            <typeparam name="T">The type to deserialize the <paramref name="value"/> as.</typeparam>
            <returns>The deserialized value.</returns>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If a deserialization exception occurs or if no 
            <see cref="T:PropertiesDotNet.Serialization.IPropertiesPrimitiveConverter"/> could deserialize the primitive <paramref name="value"/> as <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesSerializer.DeserializePrimitive(System.Type,System.String)">
            <summary>
            Deserializes the primitive <paramref name="value"/> as the given <paramref name="type"/>.
            </summary>
            <param name="type">The type to deserialize the <paramref name="value"/> as.</param>
            <param name="value">The primitive value to deserialize.</param>
            <returns>The deserialized value.</returns>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If a deserialization exception occurs or if no 
            <see cref="T:PropertiesDotNet.Serialization.IPropertiesPrimitiveConverter"/> could deserialize the primitive <paramref name="value"/> as the <paramref name="type"/>.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesSerializer.SerializePrimitive(System.Object)">
            <summary>
            Serializes the primitive <paramref name="value"/>.
            </summary>
            <param name="value">The primitive value to serialize.</param>
            <returns>The serialized value.</returns>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If a serialization exception occurs or if no 
            <see cref="T:PropertiesDotNet.Serialization.IPropertiesPrimitiveConverter"/> could serialize the primitive <paramref name="value"/>.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesSerializer.SerializePrimitive(System.Type,System.Object)">
            <summary>
            Serializes the primitive <paramref name="value"/> as the given <paramref name="type"/>.
            </summary>
            <param name="type">The type to serialize the <paramref name="value"/> as.</param>
            <param name="value">The primitive value to serialize.</param>
            <returns>The serialized value.</returns>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If a serialization exception occurs or if no 
            <see cref="T:PropertiesDotNet.Serialization.IPropertiesPrimitiveConverter"/> could serialize the primitive <paramref name="value"/> as the <paramref name="type"/>.</exception>
        </member>
        <member name="T:PropertiesDotNet.Serialization.PropertiesSerializerSettings">
            <summary>
            Represents a class that provides settings for a <see cref="T:PropertiesDotNet.Serialization.PropertiesSerializer"/>.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Serialization.PropertiesSerializerSettings.Default">
            <summary>
            Returns a <see cref="T:PropertiesDotNet.Serialization.PropertiesSerializerSettings"/> configured with the default settings.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Serialization.PropertiesSerializerSettings.ObjectProvider">
            <summary>
            Gets or sets the <see cref="T:PropertiesDotNet.Serialization.ObjectProviders.IObjectProvider"/> used to create instances of objects
            in this <see cref="T:PropertiesDotNet.Serialization.PropertiesSerializer"/>.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Serialization.PropertiesSerializerSettings.ValueProvider">
            <summary>
            Gets or sets the <see cref="P:PropertiesDotNet.Serialization.PropertiesSerializerSettings.ValueProvider"/> used to create instances of objects
            in this <see cref="T:PropertiesDotNet.Serialization.PropertiesSerializer"/>.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Serialization.PropertiesSerializerSettings.TreeComposer">
            <summary>
            Gets or sets the <see cref="T:PropertiesDotNet.Serialization.PropertiesTree.IPropertiesTreeComposer"/> to be used to create the object tree
            to be serialized or deserialized.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Serialization.PropertiesSerializerSettings.Converters">
            <summary>
            Gets or sets the <see cref="T:PropertiesDotNet.Serialization.IPropertiesConverter"/>s to use for the serialization and deserialization
            of .NET objects into and from ".properties" objects.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Serialization.PropertiesSerializerSettings.PrimitiveConverters">
            <summary>
            Gets or sets the <see cref="T:PropertiesDotNet.Serialization.IPropertiesPrimitiveConverter"/>s to use for the serialization and deserialization
            of primitive .NET objects into and from ".properties" primitve values.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Serialization.PropertiesSerializerSettings.DefaultObjectType">
            <summary>
            Gets or sets the default .NET type for ".properties" objects. This default type is utilized
            whenever no type is specified within a <see cref="M:PropertiesDotNet.Serialization.PropertiesSerializer.SerializeObject(System.Type,System.Object,PropertiesDotNet.Serialization.PropertiesTree.PropertiesObject)"/>
            and the <see langword="value"/>'s type cannot be retrieved, or if the type is <see langword="typeof"/>(<see langword="object"/>). 
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Serialization.PropertiesSerializerSettings.DefaultPrimitiveType">
            <summary>
            Gets or sets the default .NET type for ".properties" primitive values.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesSerializerSettings.#ctor">
            <summary>
            Creates a new blank <see cref="T:PropertiesDotNet.Serialization.PropertiesSerializerSettings"/>.
            </summary>
        </member>
        <member name="T:PropertiesDotNet.Serialization.PropertiesTree.FlatTreeComposer">
            <summary>
            An implementation of an <see cref="T:PropertiesDotNet.Serialization.PropertiesTree.IPropertiesTreeComposer"/> that only accepts and output flat (1-level) documents.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesTree.FlatTreeComposer.ReadObject(PropertiesDotNet.Core.IPropertiesReader)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesTree.FlatTreeComposer.WriteObject(PropertiesDotNet.Serialization.PropertiesTree.PropertiesObject,PropertiesDotNet.Core.IPropertiesWriter)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesTree.FlatTreeComposer.CreateRoot">
            <inheritdoc/>
        </member>
        <member name="T:PropertiesDotNet.Serialization.PropertiesTree.IPropertiesTreeComposer">
            <summary>
            Represents a type that reads ".properties" documents into a tree of properties or objects. This tree can be emitted as 
            a properties document.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesTree.IPropertiesTreeComposer.ReadObject(PropertiesDotNet.Core.IPropertiesReader)">
            <summary>
            Reads the input document and constructs a browsable object tree.
            </summary>
            <param name="input">The input document.</param>
            <returns>The root of the object tree. In a standard ".properties" document this is not contained
            within the document itself.</returns>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If an error was encountered whilst trying to
            read the document.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesTree.IPropertiesTreeComposer.WriteObject(PropertiesDotNet.Serialization.PropertiesTree.PropertiesObject,PropertiesDotNet.Core.IPropertiesWriter)">
            <summary>
            Writes an object tree into the specified document.
            </summary>
            <param name="output">The output document.</param>
            <param name="root">The root of the object tree to write.</param>
            <exception cref="T:PropertiesDotNet.Core.PropertiesException">If an error was encountered whilst trying to
            write the document.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesTree.IPropertiesTreeComposer.CreateRoot">
            <summary>
            Creates an object that is suitable as the root of a document tree.
            </summary>
            <returns>The root of a potential document tree.</returns>
        </member>
        <member name="T:PropertiesDotNet.Serialization.PropertiesTree.PropertiesObject">
            <summary>
            Represents a composite element of a ".properties" document tree. 
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Serialization.PropertiesTree.PropertiesObject.Children">
            <summary>
            Returns the (direct) children of this ".properties" object.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Serialization.PropertiesTree.PropertiesObject.ChildCount">
            <summary>
            Returns the number of (direct) children within this ".properties" object.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Serialization.PropertiesTree.PropertiesObject.DeepChildCount">
            <summary>
            Returns the number of children (including sub-children) within this ".properties" object.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesTree.PropertiesObject.#ctor(System.String,System.Collections.Generic.IEnumerable{PropertiesDotNet.Serialization.PropertiesTree.PropertiesTreeNode})">
            <summary>
            Creates a new object node for a ".properties" document tree.
            </summary>
            <param name="name">The name of this particular node.</param>
            <param name="children">The children of this object node.</param>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesTree.PropertiesObject.#ctor(System.String)">
            <summary>
            Creates a new object node for a ".properties" document tree.
            </summary>
            <param name="name">The name of this particular node.</param>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesTree.PropertiesObject.Add(PropertiesDotNet.Serialization.PropertiesTree.PropertiesTreeNode)">
            <summary>
            Adds the specified node as a child of this object node.
            </summary>
            <param name="child">The child node to add.</param>
            <returns>The child that was added.</returns>
            <exception cref="T:System.ArgumentException">A child node with the same name already exists.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesTree.PropertiesObject.AddProperty(System.String,System.String)">
            <summary>
            Adds a primitive property to this object.
            </summary>
            <param name="key">The key for the primitive property.</param>
            <param name="value">The value for the primitive property.</param>
            <returns>The property that was added.</returns>
            <exception cref="T:System.ArgumentException">A child node with the same name already exists.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesTree.PropertiesObject.AddPrimitive(System.String,System.String)">
            <summary>
            Adds a primitive property to this object.
            </summary>
            <param name="key">The key for the primitive property.</param>
            <param name="value">The value for the primitive property.</param>
            <returns>The property that was added.</returns>
            <exception cref="T:System.ArgumentException">A child node with the same name already exists.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesTree.PropertiesObject.AddObject(System.String)">
            <summary>
            Adds an properties object to this object.
            </summary>
            <param name="name">The name of the object to add.</param>
            <returns>The object that was added.</returns>
            <exception cref="T:System.ArgumentException">A child node with the same name already exists.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesTree.PropertiesObject.TryGetChild(System.String,PropertiesDotNet.Serialization.PropertiesTree.PropertiesTreeNode@)">
            <summary>
            Retrieves the child with the specified name, if available.
            </summary>
            <param name="name">The name of the node</param>
            <param name="node">The child node with the specified name.</param>
            <returns>true if this object contains a child element with the given <paramref name="name"/>; false otherwise.</returns>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesTree.PropertiesObject.TryGetProperty(System.String,PropertiesDotNet.Serialization.PropertiesTree.PropertiesPrimitive@)">
            <summary>
            Retrieves the primitive property with the specified name, if available.
            </summary>
            <param name="name">The name of the node</param>
            <param name="property">The primitive property with the specified name.</param>
            <returns>true if this object contains a primitive property with the given <paramref name="name"/>; false otherwise.</returns>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesTree.PropertiesObject.TryGetPrimitive(System.String,PropertiesDotNet.Serialization.PropertiesTree.PropertiesPrimitive@)">
            <summary>
            Retrieves the primitive property with the specified name, if available.
            </summary>
            <param name="name">The name of the node</param>
            <param name="property">The primitive property with the specified name.</param>
            <returns>true if this object contains a primitive property with the given <paramref name="name"/>; false otherwise.</returns>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesTree.PropertiesObject.GetProperty(System.String)">
            <summary>
            Retrieves the primitive property with the specified name.
            </summary>
            <param name="name">The name of the node</param>
            <returns>The primitive property with the specified name.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">No direct children with the given name exist within this object node.</exception>
            <exception cref="T:System.InvalidCastException">If the element with the <paramref name="name"/> is not a primitive property.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesTree.PropertiesObject.GetPrimitive(System.String)">
            <summary>
            Retrieves the primitive property with the specified name.
            </summary>
            <param name="name">The name of the node</param>
            <returns>The primitive property with the specified name.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">No direct children with the given name exist within this object node.</exception>
            <exception cref="T:System.InvalidCastException">If the element with the <paramref name="name"/> is not a primitive property.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesTree.PropertiesObject.TryGetObject(System.String,PropertiesDotNet.Serialization.PropertiesTree.PropertiesObject@)">
            <summary>
            Retrieves an object with the specified name, if available.
            </summary>
            <param name="name">The name of the node</param>
            <param name="object">The child object with the specified name.</param>
            <returns>true if this object contains a child object with the given <paramref name="name"/>; false otherwise.</returns>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesTree.PropertiesObject.GetObject(System.String)">
            <summary>
            Retrieves an object with the specified name, if available.
            </summary>
            <param name="name">The name of the node</param>
            <returns>The child object with the specified name.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">No direct children with the given name exist within this object node.</exception>
            <exception cref="T:System.InvalidCastException">If the element with the <paramref name="name"/> is not an object.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesTree.PropertiesObject.GetValue(System.String)">
            <summary>
            Retrieves the value of a primitive property with the specified name.
            </summary>
            <param name="propertyName">The name of the primitive property.</param>
            <returns>The primitive property with the specified name.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">No direct children with the given name exist within this object node.</exception>
            <exception cref="T:System.InvalidCastException">If the element with the <paramref name="propertyName"/> is not a primitive property.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesTree.PropertiesObject.Remove(PropertiesDotNet.Serialization.PropertiesTree.PropertiesTreeNode)">
            <summary>
            Removes the specified node from the list of children of this object node.
            </summary>
            <param name="child">The child node to add.</param>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesTree.PropertiesObject.Contains(System.String)">
            <summary>
            Checks whether this object node directly contains a child node with the given name.
            </summary>
            <param name="name">The name of the node to check for.</param>
            <returns>true if it contains the node; false otherwise.</returns>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesTree.PropertiesObject.Contains(PropertiesDotNet.Serialization.PropertiesTree.PropertiesTreeNode)">
            <summary>
            Checks whether this object node contains the underlying node as a direct child.
            </summary>
            <param name="node">The node to look for.</param>
            <returns>true if it contains the node; false otherwise.</returns>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesTree.PropertiesObject.Clear">
            <summary>
            Clears the children within this composite node.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Serialization.PropertiesTree.PropertiesObject.Item(System.String)">
            <summary>
            Returns the child with the specified name.
            </summary>
            <param name="name">The name of the child.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">No direct children with the given name exist within this object node.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesTree.PropertiesObject.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesTree.PropertiesObject.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesTree.PropertiesObject.Equals(PropertiesDotNet.Serialization.PropertiesTree.PropertiesTreeNode)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesTree.PropertiesObject.Equals(PropertiesDotNet.Serialization.PropertiesTree.PropertiesObject)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesTree.PropertiesObject.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesTree.PropertiesObject.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:PropertiesDotNet.Serialization.PropertiesTree.PropertiesPrimitive">
            <summary>
            Represents a leaf element of a ".properties" object tree.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Serialization.PropertiesTree.PropertiesPrimitive.Value">
            <summary>
            The value of this primitive property node. The <see cref="P:PropertiesDotNet.Serialization.PropertiesTree.PropertiesTreeNode.Name"/> acts as the key.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesTree.PropertiesPrimitive.#ctor(System.String,System.String)">
            <summary>
            Creates a new primitive property node.
            </summary>
            <param name="key">The key for this property node.</param>
            <param name="value">The value for this property node.</param>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesTree.PropertiesPrimitive.Equals(PropertiesDotNet.Serialization.PropertiesTree.PropertiesPrimitive)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesTree.PropertiesPrimitive.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesTree.PropertiesPrimitive.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:PropertiesDotNet.Serialization.PropertiesTree.PropertiesTreeComposer">
            <summary>
            A default implementation of an <see cref="T:PropertiesDotNet.Serialization.PropertiesTree.IPropertiesTreeComposer"/>.
            </summary>
        </member>
        <member name="F:PropertiesDotNet.Serialization.PropertiesTree.PropertiesTreeComposer.DEFAULT_DELIMITER">
            <summary>
            The default node delimiter.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Serialization.PropertiesTree.PropertiesTreeComposer.Delimiter">
            <summary>
            The delimiter used to differentiate the nodes.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesTree.PropertiesTreeComposer.#ctor">
            <summary>
            A default implementation of an <see cref="T:PropertiesDotNet.Serialization.PropertiesTree.IPropertiesTreeComposer"/>.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesTree.PropertiesTreeComposer.ReadObject(PropertiesDotNet.ObjectModel.PropertiesDocument)">
            <summary>
            Reads the input document and constructs a browsable object tree, with nodes separated by the <see cref="P:PropertiesDotNet.Serialization.PropertiesTree.PropertiesTreeComposer.Delimiter"/>.
            </summary>
            <param name="input">The input document.</param>
            <returns>The root of the object tree. In a standard ".properties" document this is not contained
            within the document itself.</returns>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesTree.PropertiesTreeComposer.ReadObject(PropertiesDotNet.Core.IPropertiesReader)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesTree.PropertiesTreeComposer.WriteObject(PropertiesDotNet.Serialization.PropertiesTree.PropertiesObject,PropertiesDotNet.Core.IPropertiesWriter)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesTree.PropertiesTreeComposer.WriteObject(PropertiesDotNet.Serialization.PropertiesTree.PropertiesObject,PropertiesDotNet.ObjectModel.PropertiesDocument)">
            <summary>
            Writes an object tree into the specified document.
            </summary>
            <param name="root">The root of the object tree to write.</param>
            <param name="doc">The output document.</param>
            <exception cref="T:System.ArgumentException">The tree contains nodes that cannot be serialized.</exception>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesTree.PropertiesTreeComposer.CreateRoot">
            <inheritdoc/>
        </member>
        <member name="T:PropertiesDotNet.Serialization.PropertiesTree.PropertiesTreeNode">
            <summary>
            Represents an element of a ".properties" document tree.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Serialization.PropertiesTree.PropertiesTreeNode.Comments">
            <summary>
            A list of the comments that will be emitted above this property when it is serialized.
            This is <see cref="T:System.Nullable`1"/> in order to save memory.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Serialization.PropertiesTree.PropertiesTreeNode.Name">
            <summary>
            The name of this particular node.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesTree.PropertiesTreeNode.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:PropertiesDotNet.Serialization.PropertiesTree.PropertiesTreeNode"/>
            </summary>
            <param name="name">The name of this particular node.</param>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesTree.PropertiesTreeNode.AddComment(System.String)">
            <summary>
            Adds a comment to this node.
            </summary>
            <param name="comment">The text value of the comment.</param>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesTree.PropertiesTreeNode.Equals(PropertiesDotNet.Serialization.PropertiesTree.PropertiesTreeNode)">
            <summary>
            Checks whether this node is equal to the underlying node.
            </summary>
            <param name="other">The underlying node.</param>
            <returns>Whether this node is equal to the underlying node.</returns>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesTree.PropertiesTreeNode.Equals(System.String)">
            <summary>
            Checks whether the name for this node is equal to the given string.
            </summary>
            <param name="other">The string to compare to.</param>
            <returns>Whether the name for this node is equal to the given string.</returns>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesTree.PropertiesTreeNode.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesTree.PropertiesTreeNode.ToString">
            <summary>
            Returns the <see cref="P:PropertiesDotNet.Serialization.PropertiesTree.PropertiesTreeNode.Name"/> of this node.
            </summary>
            <returns>The <see cref="P:PropertiesDotNet.Serialization.PropertiesTree.PropertiesTreeNode.Name"/> of this node</returns>
        </member>
        <member name="M:PropertiesDotNet.Serialization.PropertiesTree.PropertiesTreeNode.GetHashCode">
            <summary>
            Returns the hash code for this tree node.
            </summary>
            <returns>The hash of this tree node.</returns>
        </member>
        <member name="T:PropertiesDotNet.Serialization.ValueProviders.IValueProvider">
            <summary>
            Represents a provider where field and property values of objects can be changed.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Serialization.ValueProviders.IValueProvider.SetValue(System.Object,System.Reflection.FieldInfo,System.Object)">
            <summary>
            Sets the value of the given <paramref name="field"/> in the <paramref name="target"/>.
            </summary>
            <param name="target">The target object to assign the value into. Null for static fields.</param>
            <param name="field">The field value to assign.</param>
            <param name="value">The value to assign to the <paramref name="field"/>.</param>
        </member>
        <member name="M:PropertiesDotNet.Serialization.ValueProviders.IValueProvider.SetValue(System.Object,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Sets the value of the given <paramref name="property"/> in the <paramref name="target"/>.
            </summary>
            <param name="target">The target object to assign the value into. Null for static properties.</param>
            <param name="property">The property value to assign.</param>
            <param name="value">The value to assign to the <paramref name="property"/>.</param>
        </member>
        <member name="M:PropertiesDotNet.Serialization.ValueProviders.IValueProvider.GetValue(System.Object,System.Reflection.FieldInfo)">
            <summary>
            Returns the value of the given <paramref name="field"/> from the <paramref name="target"/>.
            </summary>
            <param name="target">The target object to retrieve the value. Null for static fields.</param>
            <param name="field">The field value to retrieve.</param>
            <returns>The value of the given <paramref name="field"/> from the <paramref name="target"/>.</returns>
        </member>
        <member name="M:PropertiesDotNet.Serialization.ValueProviders.IValueProvider.GetValue(System.Object,System.Reflection.PropertyInfo)">
            <summary>
            Returns the value of the given <paramref name="property"/> from the <paramref name="target"/>.
            </summary>
            <param name="target">The target object to retrieve the value. Null for static properties.</param>
            <param name="property">The property value to retrieve.</param>
            <returns>The value of the given <paramref name="property"/> from the <paramref name="target"/>.</returns>
        </member>
        <member name="T:PropertiesDotNet.Serialization.ValueProviders.ReflectionValueProvider">
            <summary>
            Represents an <see cref="T:PropertiesDotNet.Serialization.ValueProviders.IValueProvider"/> that assigns values using reflection.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Serialization.ValueProviders.ReflectionValueProvider.#ctor">
            <summary>
            Creates a new <see cref="T:PropertiesDotNet.Serialization.ValueProviders.ReflectionValueProvider"/>.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Serialization.ValueProviders.ReflectionValueProvider.GetValue(System.Object,System.Reflection.FieldInfo)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Serialization.ValueProviders.ReflectionValueProvider.GetValue(System.Object,System.Reflection.PropertyInfo)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Serialization.ValueProviders.ReflectionValueProvider.SetValue(System.Object,System.Reflection.FieldInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Serialization.ValueProviders.ReflectionValueProvider.SetValue(System.Object,System.Reflection.PropertyInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:PropertiesDotNet.Utils.DynamicGenericDictionary`2">
            <summary>
            Represents an <see cref="T:System.Collections.Generic.IDictionary`2"/> that dynamically adds <see cref="T:System.Object"/>
            items. These items must of the key and value types.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Utils.DynamicGenericDictionary`2.#ctor">
            <summary>
            Creates a new <see cref="T:PropertiesDotNet.Utils.DynamicGenericDictionary`2"/>.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Utils.DynamicGenericDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Creates a new <see cref="T:PropertiesDotNet.Utils.DynamicGenericDictionary`2"/>.
            </summary>
            <param name="inner">The inner dictionary.</param>
        </member>
        <member name="P:PropertiesDotNet.Utils.DynamicGenericDictionary`2.Item(System.Object)">
            <inheritdoc/>
        </member>
        <member name="P:PropertiesDotNet.Utils.DynamicGenericDictionary`2.IsFixedSize">
            <inheritdoc/>
        </member>
        <member name="P:PropertiesDotNet.Utils.DynamicGenericDictionary`2.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:PropertiesDotNet.Utils.DynamicGenericDictionary`2.Keys">
            <inheritdoc/>
        </member>
        <member name="P:PropertiesDotNet.Utils.DynamicGenericDictionary`2.Values">
            <inheritdoc/>
        </member>
        <member name="P:PropertiesDotNet.Utils.DynamicGenericDictionary`2.Count">
            <inheritdoc/>
        </member>
        <member name="P:PropertiesDotNet.Utils.DynamicGenericDictionary`2.IsSynchronized">
            <inheritdoc/>
        </member>
        <member name="P:PropertiesDotNet.Utils.DynamicGenericDictionary`2.SyncRoot">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Utils.DynamicGenericDictionary`2.Add(System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Utils.DynamicGenericDictionary`2.Clear">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Utils.DynamicGenericDictionary`2.Contains(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Utils.DynamicGenericDictionary`2.CopyTo(System.Array,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Utils.DynamicGenericDictionary`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Utils.DynamicGenericDictionary`2.Remove(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Utils.DynamicGenericDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:PropertiesDotNet.Utils.DynamicGenericDictionary`2.DynamicDictionaryItemCollection`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:PropertiesDotNet.Utils.DynamicGenericDictionary`2.DynamicDictionaryItemCollection`1.IsSynchronized">
            <inheritdoc/>
        </member>
        <member name="P:PropertiesDotNet.Utils.DynamicGenericDictionary`2.DynamicDictionaryItemCollection`1.SyncRoot">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Utils.DynamicGenericDictionary`2.DynamicDictionaryItemCollection`1.#ctor(System.Collections.Generic.ICollection{`2})">
            <summary>
            Creates a new <see cref="T:PropertiesDotNet.Utils.DynamicGenericDictionary`2.DynamicDictionaryItemCollection`1"/>.
            </summary>
            <param name="collection">The inner collection.</param>
        </member>
        <member name="M:PropertiesDotNet.Utils.DynamicGenericDictionary`2.DynamicDictionaryItemCollection`1.CopyTo(System.Array,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Utils.DynamicGenericDictionary`2.DynamicDictionaryItemCollection`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Utils.DynamicGenericDictionary`2.DynamicDictionaryEnumerator.#ctor(System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Creates a new <see cref="T:PropertiesDotNet.Utils.DynamicGenericDictionary`2.DynamicDictionaryEnumerator"/>.
            </summary>
            <param name="enumerator">The inner enumerator.</param>
        </member>
        <member name="P:PropertiesDotNet.Utils.DynamicGenericDictionary`2.DynamicDictionaryEnumerator.Entry">
            <inheritdoc/>
        </member>
        <member name="P:PropertiesDotNet.Utils.DynamicGenericDictionary`2.DynamicDictionaryEnumerator.Key">
            <inheritdoc/>
        </member>
        <member name="P:PropertiesDotNet.Utils.DynamicGenericDictionary`2.DynamicDictionaryEnumerator.Value">
            <inheritdoc/>
        </member>
        <member name="P:PropertiesDotNet.Utils.DynamicGenericDictionary`2.DynamicDictionaryEnumerator.Current">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Utils.DynamicGenericDictionary`2.DynamicDictionaryEnumerator.MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Utils.DynamicGenericDictionary`2.DynamicDictionaryEnumerator.Reset">
            <inheritdoc/>
        </member>
        <member name="T:PropertiesDotNet.Utils.DynamicGenericList`1">
            <summary>
            Represents an adaptation for <see cref="T:System.Collections.Generic.ICollection`1" />s that dynamically adds
            values since not all generic collections implement <see cref="T:System.Collections.IList" />.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Utils.DynamicGenericList`1.#ctor">
            <summary>
            Creates a new <see cref="T:PropertiesDotNet.Utils.DynamicGenericList`1"/>.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Utils.DynamicGenericList`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Creates a new <see cref="T:PropertiesDotNet.Utils.DynamicGenericList`1"/>.
            </summary>
            <param name="innerCollection">The inner collection.</param>
        </member>
        <member name="M:PropertiesDotNet.Utils.DynamicGenericList`1.Add(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Utils.DynamicGenericList`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Utils.DynamicGenericList`1.Contains(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Utils.DynamicGenericList`1.IndexOf(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Utils.DynamicGenericList`1.Insert(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="P:PropertiesDotNet.Utils.DynamicGenericList`1.IsFixedSize">
            <inheritdoc/>
        </member>
        <member name="P:PropertiesDotNet.Utils.DynamicGenericList`1.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Utils.DynamicGenericList`1.Remove(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Utils.DynamicGenericList`1.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:PropertiesDotNet.Utils.DynamicGenericList`1.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Utils.DynamicGenericList`1.CopyTo(System.Array,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:PropertiesDotNet.Utils.DynamicGenericList`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:PropertiesDotNet.Utils.DynamicGenericList`1.IsSynchronized">
            <inheritdoc/>
        </member>
        <member name="P:PropertiesDotNet.Utils.DynamicGenericList`1.SyncRoot">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Utils.DynamicGenericList`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:PropertiesDotNet.Utils.HashCodeHelper">
            <summary>
            Provides functions for generating hash codes.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Utils.HashCodeHelper.GenerateHashCode(System.Object[])">
            <summary>
            Uses a custom hashing algorithm to generate the hash code of the given objects.
            </summary>
            <param name="args">The objects to get the hash code of.</param>
            <returns>The hash code.</returns>
        </member>
        <member name="M:PropertiesDotNet.Utils.HashCodeHelper.GenerateHashCode``1(System.Collections.Generic.IList{``0})">
            <summary>
            Uses a custom hashing algorithm to generate the hash code of the given objects.
            </summary>
            <param name="args">The objects to get the hash code of.</param>
            <returns>The hash code.</returns>
        </member>
        <member name="M:PropertiesDotNet.Utils.HashCodeHelper.GenerateHashCode``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Uses a custom hashing algorithm to generate the hash code of the given objects.
            </summary>
            <param name="args">The objects to get the hash code of.</param>
            <returns>The hash code.</returns>
        </member>
        <member name="M:PropertiesDotNet.Utils.HashCodeHelper.GenerateHashCode``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Uses a custom hashing algorithm to generate the hash code of the given objects.
            </summary>
            <param name="args">The objects to get the hash code of.</param>
            <returns>The hash code.</returns>
        </member>
        <member name="M:PropertiesDotNet.Utils.HashCodeHelper.GenerateHashCode``1(``0[])">
            <summary>
            Uses a custom hashing algorithm to generate the hash code of the given objects.
            </summary>
            <param name="args">The objects to get the hash code of.</param>
            <returns>The hash code.</returns>
        </member>
        <member name="T:PropertiesDotNet.Utils.OrderedDictionary`2">
            <summary>
            A generic implementation of <see cref="T:System.Collections.Generic.IDictionary`2"/> that preserves key insertion order.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
        </member>
        <member name="P:PropertiesDotNet.Utils.OrderedDictionary`2.Keys">
            <summary>
            Gets the keys.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Utils.OrderedDictionary`2.Values">
            <summary>
            Gets the values.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Utils.OrderedDictionary`2.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Utils.OrderedDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether read is only.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Utils.OrderedDictionary`2.IsFixedSize">
            <inheritdoc/>
        </member>
        <member name="P:PropertiesDotNet.Utils.OrderedDictionary`2.System#Collections#IDictionary#Keys">
            <inheritdoc/>
        </member>
        <member name="P:PropertiesDotNet.Utils.OrderedDictionary`2.System#Collections#IDictionary#Values">
            <inheritdoc/>
        </member>
        <member name="P:PropertiesDotNet.Utils.OrderedDictionary`2.IsSynchronized">
            <inheritdoc/>
        </member>
        <member name="P:PropertiesDotNet.Utils.OrderedDictionary`2.SyncRoot">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Utils.OrderedDictionary`2.#ctor">
            <summary>
            Creates a new <see cref="T:PropertiesDotNet.Utils.OrderedDictionary`2"/>.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Utils.OrderedDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Creates a new <see cref="T:PropertiesDotNet.Utils.OrderedDictionary`2"/>.
            </summary>
            <param name="comparer">The comparer for the dictionary.</param>
        </member>
        <member name="M:PropertiesDotNet.Utils.OrderedDictionary`2.Add(`0,`1)">
            <summary>
            Adds the <paramref name="key"/> and <paramref name="value"/>.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:PropertiesDotNet.Utils.OrderedDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds the <paramref name="item"/>.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:PropertiesDotNet.Utils.OrderedDictionary`2.Clear">
            <summary>
            Clears this dictionary.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Utils.OrderedDictionary`2.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>An IEnumerator.</returns>
        </member>
        <member name="M:PropertiesDotNet.Utils.OrderedDictionary`2.TryGetValue(`0,`1@)">
            <inheritdoc/>
        </member>
        <member name="P:PropertiesDotNet.Utils.OrderedDictionary`2.Item(`0)">
            <inheritdoc/>
        </member>
        <member name="P:PropertiesDotNet.Utils.OrderedDictionary`2.Item(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:PropertiesDotNet.Utils.StreamCursor">
            <summary>
            A cursor for marking a reading or writing position.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Utils.StreamCursor.AbsoluteOffset">
            <summary>
            The current index or offset.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Utils.StreamCursor.Line">
            <summary>
            The current line.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Utils.StreamCursor.Column">
            <summary>
            The current column.
            </summary>
        </member>
        <member name="P:PropertiesDotNet.Utils.StreamCursor.Position">
            <summary>
            The current position of the cursor, as a <see cref="T:PropertiesDotNet.Core.StreamMark"/>.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Utils.StreamCursor.#ctor">
            <summary>
            Creates a <see cref="T:PropertiesDotNet.Utils.StreamCursor"/>.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Utils.StreamCursor.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes a <see cref="T:PropertiesDotNet.Utils.StreamCursor"/>.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:PropertiesDotNet.Utils.StreamCursor.AdvanceColumn(System.Int32)">
            <summary>
            Advances by the specified amount of characters.
            </summary>
            <param name="amount">The amount.</param>
        </member>
        <member name="M:PropertiesDotNet.Utils.StreamCursor.AdvanceLine">
            <summary>
            Advances to a new line.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Utils.StreamCursor.Reset">
            <summary>
            Resets this cursor.
            </summary>
        </member>
        <member name="M:PropertiesDotNet.Utils.StreamCursor.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="M:PropertiesDotNet.Utils.StreamCursor.ToString">
            <summary>
            Returns the current position as a string.
            </summary>
            <returns>The current position as a string.</returns>
        </member>
        <member name="T:PropertiesDotNet.Utils.TypeExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Type"/> compatibility.
            </summary>
        </member>
    </members>
</doc>
